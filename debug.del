import "main.del";

globalvar Boolean[] S_FAST_PICKUP_SPAWN; // collectable fast spawning. [0] = mod, [1] = buff
globalvar Boolean[] spawnWithMod; // array of mods to give
globalvar Boolean infiniteAmmoDbg; // infinite ammo bool

rule: "Global Debug"
{
    EnableInspectorRecording();

    S_FAST_PICKUP_SPAWN[0] = WorkshopSettingToggle(". Debug",                 "Fast Mod Spawn", false, -12);
    S_FAST_PICKUP_SPAWN[1] = WorkshopSettingToggle(". Debug",                 "Fast Buff Spawn", false, -11);
    spawnWithMod[Mod.Pierce] = WorkshopSettingToggle(". Debug",                      "Spawn With Pierce", false, -10);
    spawnWithMod[Mod.Ricochet] = WorkshopSettingToggle(". Debug",                      "Spawn With Ricochet", false, -9);
    spawnWithMod[Mod.Buckshot] = WorkshopSettingToggle(". Debug",                      "Spawn With Buckshot", false, -8);
    spawnWithMod[Mod.Prism] = WorkshopSettingToggle(". Debug",                      "Spawn With Prism", false, -7);
    spawnWithMod[Mod.Ballista] = WorkshopSettingToggle(". Debug",                      "Spawn With Ballista", false, -6);
    spawnWithMod[Mod.Electro] = WorkshopSettingToggle(". Debug",                      "Spawn With Electro", false, -5);
    spawnWithMod[Mod.Spark] = WorkshopSettingToggle(". Debug",                      "Spawn With Spark", false, -4);
    spawnWithMod[Mod.Arc] = WorkshopSettingToggle(". Debug",                      "Spawn With Arc", false, -3);
    spawnWithMod[Mod.Needle] = WorkshopSettingToggle(". Debug",                      "Spawn With Needle", false, -2);
    spawnWithMod[Mod.Volt] = WorkshopSettingToggle(". Debug",                      "Spawn With Volt", false, -1);
    infiniteAmmoDbg = WorkshopSettingToggle(". Debug",                           "Infinite Ammo", false, -0.9);

    if (S_FAST_PICKUP_SPAWN[0])
        for (Number i! = 0; i < S_MOD_CD.Length; i++)
            S_MOD_CD[i] = 2;

    if (S_FAST_PICKUP_SPAWN[1])
    {
        S_RANDOM_BUFF_COOLDOWN = false;
        S_BUFF_CD = 2;
        S_BUFF_CREATION = 2;
    }

    // server load, entity, and text information
    CreateHudText(host, null, <"C: <0>%, A: <1>%, P: <2>%, E: <3>, T: <4>\n", 
                  Near(ServerLoad()), 
                  Near(ServerLoadAverage()), 
                  Near(ServerLoadPeak()), 
                  EntityCount(), 
                  TextCount()>,
                  null, Location.Right, 0.2);

    // world information
    // CreateHudText(host, null, 
    // <"validMap: <0>\nbuffCooldown: <1>, chosenBuff: <2> (<3>)\nfinal time: <4> + <5>, mut remaining: <6>", 
    // validMap,
    // buffCooldown, chosenBuff, buffStr,
    // S_BUFF_CD, rand, buffIndex.Length

    // >, null, Location.Right, 0.3);

    // WaitUntil(validMap, 10);

    // mod world information
    // for (Number i! = 0; i < modPos.Length; i++)
    // {
    //     CreateInWorldText(host, <"<0> (<1>), <2>\n<3>\n<4>\n\n\n\n\n", 
    //     Once(i), modNames[Once(i)],
    //     modCooldown[Once(i)],
    //     Once(modPos[i]),
    //     DistanceBetween(PositionOf(host) + Up(), Once(modPos[i]))>, 
    //     Once(modPos[i]), 

    //     1, Clipping.DoNotClip);
    // }

    // // buff world information
    // CreateInWorldText(host, <"<0> (<1>), <2>\n<3>\n<4>\n\n\n\n\n", 
    // chosen_mut, m_str, m_cd != 0 ? m_cd : m_pb,
    // m_pos, 
    // DistanceBetween(PositionOf(host) + Up(), m_pos)>, m_pos, 1, Clipping.DoNotClip);
}

rule: "Player Debug"
Event.OnPlayerJoin
{
    // against wall?
    // CreateHudText(player, null, Update(IsTrueForAny([
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 0,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 1,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 2,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 3,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 4,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 5,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 6,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 7,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 8,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 9,  0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 10, 0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 11, 0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 12, 0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 13, 0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 14, 0), null, All()),
    //         RayHit(EyePos(), EyePos() + DirectionFromAngles(HorizontalFacingAngleOf() + 22.5 * 15, 0), null, All())],
    //         DistanceBetween(EyePos(), Curr()) <= 0.9999)),
    //         null, Location.Right, 0.3);

    for (Number i! = 0; i < spawnWithMod.Length; i++)
    {
        if (spawnWithMod[i])
        {
            playerHasMod = true;
            modEnabled[i] = true;
            heldModAmmo[i] = S_MOD_AMMO[i];
            heldModStr[HeldStr.Name] = MOD_NAMES[i];
            heldModStr[HeldStr.Icon] = MOD_ICONS[i];
            currentModIdx = i;
            modColor = MOD_COLORS[i];

            if (i == 9 || i == 7 || i == 8)
            {
                disablePrimaryFire = true;
                showAmmoAsPercentage = true;
                DisallowButton(player, Button.PrimaryFire);
            }
        }
    }

    if (infiniteAmmoDbg)
        infAmmo = true;

    // player information
    // CreateHudText(host, null, <" \n<0>: <1>, <2>, <3>\ngainingMoveSpeed: <4>, bhSpeedFloor: <5>, bhSpeedPercent: <6>, HSpeed: <7>\nisdodging: <8>, isflying: <9>, isHovering: <10>\n<11>\nhas buff: <12>", 
    // player, PositionOf(), Facing(), ThrottleOf(),
    // gainingMoveSpeed, bhopSpeedFloor, bhopSpeedPercent, HorizontalSpeedOf(), 
    // isDodging, isFlying, isHovering,
    // playerHasMod ? <"current mod: <0>", heldModStr> : <"recent mod: <0>", heldModStr>,
    // playerHasBuff

    // >, null, Location.Right, 0.5);
}

rule: "Event Damage"
Event.OnDamageDealt
if (player == host)
{
    LogToInspector(<"<0> damage", EventDamage()>);
}

rule: "Remove Mod Hotkey"
Event.OngoingPlayer
if (IsInteractHeld())
if (playerHasMod)
{
    WaitIfTrue(1);

    disablePrimaryFire = false;
    AllowButton(player, Button.PrimaryFire);
    heldModAmmo[currentModIdx] = 0;
    modEnabled[currentModIdx] = false;
    modColor = null;

    playerHasMod = false;
    currentModIdx = -1;
}

// rule: "Kill"
// Event.OngoingPlayer
// if (player == host && IsInteractHeld())
// {
//     Kill();
// }

Player[] bots: FilteredArray(All(), IsDummyBot(Curr()));
Player[] humans: FilteredArray(All(), !IsDummyBot(Curr()));
rule: "Bots"
if (bots.Length < 8 - humans.Length)
if (IsButtonHeld(host, Button.Interact) && !IsButtonHeld(host, Button.Crouch))
{
    CreateDummyBot(HeroOf(host), OppositeTeamOf(TeamOf(host)), -1, RayCastHitPosition(EyePosition(host), EyePosition(host) + Facing(host) * 100, null, null), Facing(host) * -1);
    // SetRespawnMaxTime(LastCreatedEntity(), 1);
}

rule: "Destroy Bots"
Event.OngoingPlayer
if (IsButtonHeld(host, Button.Crouch) && IsButtonHeld(host, Button.Interact))
{
    DestroyAllDummyBots();
}

// rule: "Show OW Spawn Points"
// if (match_started)
// {
//     for (Number i! = 0; i < SpawnPoints(Team.All).Length; i++)
//     {
//         CreateEffect(All(), Effect.Sphere, Color.White, RayCastHitPosition(SpawnPoints(Team.All)[i], SpawnPoints(Team.All)[i] + Down(), null, null), 0.5, EffectRev.None);
//     }
// }

// rule: "Bots Hold Left Click"
// Event.OngoingPlayer
// if (IsDummyBot())
// {
//     StartHoldingButton(player, Button.PrimaryFire);
// }

// rule: "Show start_pos"
// Event.OngoingPlayer
// {
//     CreateEffect(player, Effect.Sphere, Color.Aqua, weapon_muzzle, 0.05);
// }
