import "../../main.del";

// everything mutator related is a text book definition of spaghetti code. surely this wont bite me in the ass later :)
globalvar Boolean S_ENABLE_MUTATORS; // mutator can spawn
globalvar Boolean S_RANDOM_MUTATOR_COOLDOWN; // mutator timer is randomized
globalvar Boolean[] S_SPAWN_MUTATOR; // allowed mutators
globalvar Number S_M_CD; // constant for All() mutators
globalvar Number S_M_CREATION; // constant for the mutator to spawn after m_cd runs low
globalvar Number S_M_DURATION; // constant for the mutator duration
globalvar Number chosenMutator; // chosen id of the mutator
globalvar Vector[] MUTATOR_LOCATIONS; // array of All() possible mutator locations
globalvar Color[] mutatorColors; // color of the currently spawned mutator, 0: category color 1: mutator color
globalvar Vector mutatorPos; // final position of the mutator
globalvar Number mutatorProgressBar; // progress bar control var for S_M_CREATION
globalvar Boolean isMutatorTimerRunning; // is the mutator timer running
globalvar Boolean isMutatorInWorld; // is the mutator currently in the world
globalvar Number mutatorCooldown; // remaining time for the mutator to spawn
globalvar String mutatorIcon; // current mutator icon string
globalvar String mutatorStr; // current mutator name string
globalvar Player | String mutatorUser; // current player that owns the mutator

playervar Boolean canPickupMutator; // can the player pick up the mutator
playervar Boolean playerHasMutator; // does the player have the mutator
playervar Boolean[] mutatorEnabled; // which mutator is enabled
playervar Number mutatorNormalTimeLeft; // progress bar control var for the player owning a mutator
playervar Button abilityButton; // current ability button

disabled rule: "---------------- Mutator ----------------"{}

rule: "[Mutator] :: Create Collectable"
if (matchStarted)
if (validMap)
if (S_ENABLE_MUTATORS)
if (mutatorCooldown <= 0)
if (mutatorIndex.Length > 0)
{
    isMutatorInWorld = true;

    BigMessage(All(), <"<0> is spawning", mutatorStr>);

    isMutatorTimerRunning = false;
    ChaseVariableOverTime(mutatorProgressBar, 100, S_M_CREATION, TimeChaseReevaluation.DestinationAndDuration);
    Wait(S_M_CREATION);
    StopChasingVariable(mutatorProgressBar);

    PlayEffect(All(), PlayEffect.BadPickupEffect, mutatorColors[0], mutatorPos, 2);
    PlayEffect(All(), PlayEffect.RingExplosion, mutatorColors[1], mutatorPos, 4);
    PlayEffect(All(), PlayEffect.RingExplosion, mutatorColors[1], mutatorPos + Vector(0, -0.5, 0), 3);
}

rule: "[Mutator] :: Collect Mutator"
Event.OngoingPlayer
if (HasSpawned())
if (!playerHasMutator)
if (mutatorProgressBar == 100)
if (isMutatorInWorld)
if (canPickupMutator)
if (DistanceBetween(mutatorPos, PositionOf() + Up()) < S_PICKUP_RAD)
if (IsAlive())
{
    PlayEffect(All(), PlayEffect.BadPickupEffect, mutatorColors[0], mutatorPos, 1);
    PlayEffect(All(), PlayEffect.BuffExplosionSound, null, mutatorPos, 200);
    isMutatorInWorld = false;
    playerHasMutator = true;
    mutatorUser = player;
    mutatorEnabled[chosenMutator] = true;

    // TODO: replace this with SubtractOverTime()
    mutatorNormalTimeLeft = 100;
    ChaseVariableOverTime(mutatorNormalTimeLeft, 0, S_M_DURATION, TimeChaseReevaluation.None);
}

void RemoveMutator() playervar "[Mutator] :: Remove Mutator"
{
    PlayEffect(All(), PlayEffect.BadPickupEffect, mutatorColors[0], player, 1);
    playerHasMutator = false;

    for (Number i = 0; i < 9; i++) // brute force (and ugly) way to remove the mutator
    {
        if (mutatorEnabled[i])
        {
            LogToInspector(<"<0> removed from <1>", MUTATOR_NAMES[i], mutatorUser>);
            mutatorEnabled[i] = false;

            switch (i)
            {
                case (0):
                    StopForcingPlayerOutlines(All(), player);
                    break;
                case (1):
                    break;
                case (2):
                    break;
                case (3):
                    break;
                case (4):
                    infAmmo = false;

                    infDodges = false;
                    maxDodges = S_DODGE_AMT;
                    if (dodges > S_DODGE_AMT)
                        dodges = maxDodges;

                    if (usingAbility && equippedAbility == Ability.Stimpack)
                        delay = S_DELAY * 0.70;
                    else 
                        delay = S_DELAY;

                    bhopSpeedFloor /= 2;
                    bhopSpeedRate = S_BHOP_SPEED_RATE / 2;
                    bhopSpeedPercent /= 2;
                    SetMoveSpeed(player, bhopSpeedPercent);
                    break;
                case (5):
                    break;
                case (6):
                    DestroyEffect(denialMutatorEffect);
                    break;
                case (7):
                    break;
            }
        }
    }

    mutatorUser = null;
}

rule: "[Mutator] :: Time Ran out, Remove Mutator"
Event.OngoingPlayer
if (mutatorNormalTimeLeft <= 0)
if (playerHasMutator)
{
    SmallMessage(player, <"  <0> duration expired", mutatorStr>);
    RemoveMutator();
    mutatorIndex -= chosenMutator; // remove the chosen mutator from the array

    MinWait();

    SetMutatorPosition();
    StartMutatorTimer();
}

globalvar Vector newMutatorPos;
// TODO: timer that resets the m_pos over time if it hasn't been picked up
// TODO: show remaining time on the mutator icon
rule: "[Mutator] :: Player Died, Place Mutator on Victims Body"
Event.OnDeath
if (playerHasMutator)
if (!mutatorEnabled[6])
{
    SmallMessage(player, <"<0> dropped", mutatorStr>);
    RemoveMutator();

    if (!EventWasEnvironment())
    {
        newMutatorPos = RayCastHitPosition(PositionOf(), PositionOf() + Down() * 100, null, All(), false) + Up();

        if (newMutatorPos.Y < LOWEST_MAP_Y)
        {
            newMutatorPos = NearestWalkablePosition(Victim()) + Up();
        }
    }
    else 
        newMutatorPos = NearestWalkablePosition(Victim()) + Up();

    mutatorPos = newMutatorPos;
    canPickupMutator = false;
    isMutatorInWorld = true;
}

globalvar Number rand;
void SetMutatorPosition() "[Mutator] :: Set new position and reset time"
{
    // get a random position from the mutatorLocations array in pickups/init.del
    Vector chosenMutatorPos = MUTATOR_LOCATIONS.Random(); 
    mutatorPos = chosenMutatorPos;

    if (mutatorIndex.Length > 0)
    {
        // get a random mutator from the array
        chosenMutator = mutatorIndex.Random();
        switch (chosenMutator)
        {
            case (0):
                mutatorColors[0] = Color.SkyBlue;
                mutatorColors[1] = Color.White;
                mutatorIcon = AbilityIconString(Hero.Widowmaker, Button.Ultimate);
                mutatorStr = MUTATOR_NAMES[0];
                break;
            case (1):
                mutatorColors[0] = Color.SkyBlue;
                mutatorColors[1] = Color.Blue;
                mutatorIcon = AbilityIconString(Hero.Roadhog, Button.Ultimate);
                mutatorStr = MUTATOR_NAMES[1];
                break;
            case (2):
                mutatorColors[0] = Color.SkyBlue;
                mutatorColors[1] = Color.Purple;
                mutatorIcon = AbilityIconString(Hero.Sombra, Button.Ability1);
                mutatorStr = MUTATOR_NAMES[2];
                break;
            case (3):
                mutatorColors[0] = Color.Red;
                mutatorColors[1] = Color.Black;
                mutatorIcon = IconString(Icon.Poison);
                mutatorStr = MUTATOR_NAMES[3];
                break;
            case (4):
                mutatorColors[0] = Color.Red;
                mutatorColors[1] = Color.Orange;
                mutatorIcon = AbilityIconString(Hero.Reaper, Button.Ultimate);
                mutatorStr = MUTATOR_NAMES[4];
                break;
            case (5):
                mutatorColors[0] = Color.Red;
                mutatorColors[1] = Color.Violet;
                mutatorIcon = AbilityIconString(Hero.Moira, Button.SecondaryFire);
                mutatorStr = MUTATOR_NAMES[5];
                break;
            case (6): // denial
                mutatorColors[0] = Color.Purple;
                mutatorColors[1] = Color.Violet;
                mutatorIcon = AbilityIconString(Hero.Baptiste, Button.Ability2);
                mutatorStr = MUTATOR_NAMES[6];
                break;
            case (7):
                mutatorColors[0] = Color.Purple;
                mutatorColors[1] = Color.SkyBlue;
                mutatorIcon = AbilityIconString(Hero.Echo, Button.Ultimate);
                mutatorStr = MUTATOR_NAMES[7];
                break;
        }
    }
}

void StartMutatorTimer() "[Mutator] :: Reset timer"
{
    mutatorProgressBar = 0;

    if (S_RANDOM_MUTATOR_COOLDOWN)
    {
        rand = RandomInteger(0, 120);
        mutatorCooldown = S_M_CD + rand;
    }
    else 
    {
        mutatorCooldown = S_M_CD;
    }

    isMutatorTimerRunning = true;
}

rule: "[Mutator] :: Mutator Internal Timer"
if (isMutatorTimerRunning)
if (mutatorIndex.Length > 0)
{
    mutatorCooldown--;
    Wait(1);
    LoopIfConditionIsTrue();
}