import "../../main.del";
import ".buffMain.del";
playervar Any[] denialBuffEffect;

rule: "[Buff] :: Denial : Set Status"
Event.OngoingPlayer
if (buffEnabled[6])
{
    LogToInspector(<"Denial given to <0>", buffUser>);
    SetStatus(player, null, Status.Unkillable, 999999999);
    CreateEffect(All(), Effect.EchoCloningEffect, Color.White, player);
    denialBuffEffect[0] = LastCreatedEntity();
    CreateEffect(player, Effect.BaptisteImmortalityFieldProtectedSound, Color.White, player, 100);
    denialBuffEffect[1] = LastCreatedEntity();
}

rule : "[Buff] :: Denial : Player has 1 HP Remove Status"
Event.OnDamageTaken
if (buffEnabled[6])
if (Ceil(Health()) == 1)
{
    LogToInspector(<"Denial removed from <0>", buffUser>);

    // force the player to have 0 time left to call the buff position/timer functions 
    StopChasingVariable(buffNormalTimeLeft);
    buffNormalTimeLeft = 0; 

    RemoveBuff();
    buffIndex -= chosenBuff; // remove the chosen buff from the array

    ApplyImpulse(player, DirectionTowards(Attacker(), player) + Vector(0, 0.3, 0), 25, Relative.ToWorld, ContraryMotion.Cancel);

    PlayEffect(All(), PlayEffect.BadPickupEffect, Color.Purple, PositionOf() + Up() + Facing(), 1);
    PlayEffect(All(), PlayEffect.TracerRecallDisappearEffect, Color.Team1, PositionOf() + Up() + Facing());

    MinWait();

    SetBuffPosition();
    StartBuffTimer();

    ClearStatus(player, Status.Unkillable);

    PlayEffect(All(), PlayEffect.BadPickupEffect, Color.Purple, PositionOf() + Up() + Facing(), 1);
    PlayEffect(All(), PlayEffect.TracerRecallReappearEffect, Color.Team1, PositionOf() + Up() + Facing());
    Heal(player, null, 999999999);
}