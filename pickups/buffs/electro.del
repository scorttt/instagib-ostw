import "../../main.del";
import ".bmain.del";


// logic
globalvar Number S_ELECTRO_PROJ_DELAY;
globalvar Number S_ELECTRO_PROJ_GRAV;
globalvar Number S_ELECTRO_PROJ_SPEED;
globalvar Number S_ELECTRO_PDELTA;
globalvar Number S_ELECTRO_PROJ_EXPLOSION_RADIUS;
globalvar Number FINAL_PROJ_DELAY;
globalvar Number PROJ_SIZE;
globalvar Vector projGravVec;
playervar Vector vel;
playervar Vector projPos;
playervar Boolean projHitSurface; 
playervar Number airtime; // airtime after the projectile hits a surface
playervar Number totalProjAirtime; // total airtime, destroy the projectile after a set time regardless if it hit a surface or not

disabled rule: "---------------- Electro ----------------"{}

rule: "[Buff] :: Electro : Init"
{
    WaitUntil(S_ELECTRO_PROJ_SPEED != 0, 1); // check to prevent projectile fuckery if i copy workshop code with this file focused
    projGravVec = Vector(0, S_ELECTRO_PROJ_GRAV, 0);
    PROJ_SIZE = (0.25 + (S_ELECTRO_PROJ_SPEED / 100));
    FINAL_PROJ_DELAY = Clamp(S_ELECTRO_PROJ_DELAY * 4, 2, 3);
}

rule: "[Buff] :: Electro : Action - Primary Fire"
Event.OngoingPlayer
if (buffEnabled[Buff.Electro])
{
    // i dont know what im going to do here yet
    // if (!infAmmo)
    //     heldBuffAmmo[Buff.Electro] -= 1;
}

Number projDistCheck: DistanceBetween(projPos, Update(RayCastHitPosition(projPos, projPos + (vel * 0.016) * 100, AllLivingPlayers(), player)));
rule: "[Buff] :: Electro : Action - Launch Grenade"
Event.OngoingPlayer
if (buffEnabled[Buff.Electro])
if (IsButtonHeld(player, Button.Reload))
if (IsAlive())
{
    if (!infAmmo)
        heldBuffAmmo[Buff.Electro] -= 2;

    Any effect;
    projHitSurface = false;
    totalProjAirtime = 0;
    airtime = 0;
    projPos = EyePosition();
    vel = Normalize(Facing() + Vector(0, S_ELECTRO_PDELTA, 0)) * S_ELECTRO_PROJ_SPEED;

    DestroyEffect(effect);

    CreateEffect(All(), Effect.Orb, BUFF_COLORS[Buff.Electro], projPos, 1);
    effect[0] = LastCreatedEntity();
    CreateEffect(All(), Effect.WinstonTeslaCannonTargetSound, Color.White, projPos, 45);
    effect[1] = LastCreatedEntity();
    CreateEffect(All(), Effect.OrisaHaltTendrilSound, Color.White, projPos, 45);
    effect[2] = LastCreatedEntity();
    CreateEffect(All(), Effect.Ring, BUFF_COLORS[Buff.Electro], RayHit(projPos, projPos + Down() * 100), PROJ_SIZE);
    effect[3] = LastCreatedEntity();

    Vector[] normals = [];
    Vector[] hitPos = [];
    Vector[] reflectionHitPos = [];
    Vector[] hpPlayer = [];
    Vector[] reflection = [];

    // projectile loop
    while (projDistCheck >= PROJ_SIZE && totalProjAirtime <= FINAL_PROJ_DELAY && airtime <= S_ELECTRO_PROJ_DELAY)
    {
        // 62.5 ticks = 1 second, 3750 ticks = 1 minute
        vel += projGravVec * 0.016; // update vel with grav vector each loop
        projPos += vel * 0.016; // update projPos with vel vector each loop
        totalProjAirtime += 0.016;

        if (projHitSurface)
            airtime += 0.016;

        PlayEffect(All(), PlayEffect.GoodExplosion, BUFF_COLORS[Buff.Electro], projPos, PROJ_SIZE);

        // reflection loop (without this extra check the for below would fire twice for whatever reason)
        if (projDistCheck <= PROJ_SIZE && S_ELECTRO_PROJ_DELAY > 0) // surface hit
        {
            // i < arbitrary amount of vectors to store, in an ideal world this wouldnt matter if the math was for constant contact with one surface
            for (Number i! = 0; i < 12 && projDistCheck <= PROJ_SIZE; i++) // another check
            {
                # https://math.stackexchange.com/questions/13261/how-to-get-a-reflectionion-vector/3340378#3340378
                if (i > 0)
                {
                    projPos = hitPos[i - 1];
                    vel = reflection[i - 1];
                }

                // get hit pos and normal
                hitPos[i] = RayHit(projPos, projPos + vel * 100, AllLiving(), player);
                normals[i] = RayNormal(projPos, projPos + vel * 100, AllLiving(), player);

                // v - (2 * (v . n) * n)
                reflection[i] = vel - (2 * (Dot(vel, normals[i])) * normals[i]);
                reflectionHitPos[i] = RayHit(hitPos[i], hitPos[i] + reflection[i] * 100, AllLiving(), player); // raycast from hit pos to reflection vector
            }

            PlayEffect(All(), PlayEffect.BaptisteBioticLauncherExplosionSound, Color.White, projPos, 45);
            PlayEffect(All(), PlayEffect.EchoStickyBombExplosionSound, Color.White, projPos, 45);
            projHitSurface = true;
            projGravVec = projGravVec * -1; // flip gravity vector after each hit
        }

        MinWait();
    }

    projHitSurface = false;
    projGravVec = Vector(0, S_ELECTRO_PROJ_GRAV, 0);
    totalProjAirtime = 0;
    airtime = 0;
    Kill(FilteredArray(AllLiving().Remove(player), DistanceBetween(Curr(), projPos) <= S_ELECTRO_PROJ_EXPLOSION_RADIUS && IsInLineOfSight(Curr(), projPos)), player);

    // effects
    PlayEffect(All(), PlayEffect.EchoStickyBombExplosionEffect, Color.Team1, projPos, 0);
    PlayEffect(All(), PlayEffect.GoodExplosion, BUFF_COLORS[Buff.Electro], projPos, S_ELECTRO_PROJ_EXPLOSION_RADIUS);

    PlayEffect(All(), PlayEffect.WinstonJumpPackLandingSound, Color.White, projPos, 45);
    PlayEffect(All(), PlayEffect.SigmaHypersphereImplosionSound, Color.White, projPos, 45);
    PlayEffect(All(), PlayEffect.CassidyFlashbangExplosionSound, Color.White, projPos, 45);
    PlayEffect(All(), PlayEffect.EchoStickyBombExplosionSound, Color.White, projPos, 100);
    DestroyEffect(effect);

    Wait(0.5);
    LoopIfConditionIsTrue();
}