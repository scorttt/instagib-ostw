import "../../main.del";

import "wallbang.del";
import "ricochet.del";
import "buckshot.del";
import "prism.del";
import "ballista.del";
import "electro.del";
import "spark.del";
import "arc.del";
import "hydrangea.del";
import "volt.del";

// array indices should be set the same as the buff id
globalvar Number[] S_BUFF_CD; // setting array of durations a buff spawns
globalvar Number[] S_BUFF_AMMO; // setting array of maximum buff ammo the player gets by default
globalvar Boolean[] S_SPAWN_BUFF; // setting array of buffs allowed to spawn
globalvar Boolean S_ENABLE_BUFFS; // setting whether buffs are allowed
globalvar Boolean S_RANDOMIZE_BUFF_POS; // setting whether buffs randomly spawn in different locations each round
globalvar Boolean[] canPickupBuff; // array of buff indices that can be collected
playervar Boolean[] buffEnabled; // array of the enabled buff index
globalvar Boolean[] buffTimerRunning; // array of whether a buff cooldown is running
globalvar Number[] buffCooldown; // array of current buff cooldowns
globalvar Vector[] buffPos; // array of set buff positions
playervar Number[] heldBuffAmmo; // array of buff indices ammo
playervar Boolean playerHasBuff; // whether the player owns any buff
playervar Number currentBuffIn; // currently held buff index
globalvar Number buffIn; // index of the buff for the player to pick up (this probably shouldnt be a globalvar but it seems to be working fine, what could possibly go wrong)
playervar String[] heldBuffStr; // string of the held buff
globalvar Any buffTrail; // beam effect for firing weapon with a buff
playervar Color buffColor; // the given buff color to the player
playervar Color unownedBuffColor; // buff color that the player does not already own
playervar Boolean infAmmo; // boolean if player has infinite ammo
playervar Boolean showAmmoAsPercentage; // boolean if the buff is a laser


enum Buff
{
    Pierce, // 0
    Ricochet, // 1
    Buckshot, // 2
    Prism, // 3
    Ballista, // 4
    Electro, // 5
    Spark, // 6
    Arc, // 7
    Needle, // 8
    Volt // 9
}

disabled rule: "---------------- Buff ----------------"{}

enum HeldStr
{
    Name,
    Icon
}

void CollectBuff() playervar "[Buff] :: Buff Collection"
{
    buffTimestamps[buffIn] = TotalTimeElapsed();

    if (buffIn == Buff.Arc)
    {
        disablePrimaryFire = true;
        showAmmoAsPercentage = true;
    }
    else if (buffIn == Buff.Volt)
    {
        disablePrimaryFire = true;
        overheated = false;
        showAmmoAsPercentage = true;
        voltTemp = 0;
        voltDist = S_MAX_VLT_DIST;
    }
    else if (buffIn == Buff.Needle)
    {
        disablePrimaryFire = true;
        showAmmoAsPercentage = true;
    }
    else 
    {
        showAmmoAsPercentage = false;
    }

    // dont know why this is necessary but pickup strings are broken without it so whatever
    heldBuffStr[HeldStr.Name] = buffNames[buffIn];
    heldBuffStr[HeldStr.Icon] = buffIcons[buffIn];

    currentBuffIn = buffIn;
    canPickupBuff[buffIn] = false;
    buffColor = buffColors[buffIn];

    if (!playerHasBuff)
    {
        buffEnabled[buffIn] = true;
        playerHasBuff = true;
        LogToInspector(<"<0> given to <1>", heldBuffStr[HeldStr.Name], player>);
        SmallMessage(player, <"  <0>  <1>", heldBuffStr[HeldStr.Icon], heldBuffStr[HeldStr.Name]>);
    }
    else 
    {
        SmallMessage(player, <"  <0>  <1> ammo replenished", heldBuffStr[HeldStr.Icon], heldBuffStr[HeldStr.Name]>);
    }

    if (heldBuffAmmo[buffIn] < 0)
        heldBuffAmmo[buffIn] = 0;

    heldBuffAmmo[buffIn] += S_BUFF_AMMO[buffIn];

    // pickup effects
    PlayEffect(All(), PlayEffect.GoodPickupEffect, buffColor, buffPos[buffIn], 1);
    PlayEffect(All(), PlayEffect.BuffExplosionSound, null, buffPos[buffIn], 200);

    buffCooldown[buffIn] = S_BUFF_CD[buffIn];
    BuffCooldown();

    buffIn = -1;
}

void BuffCooldown() "[Buff] :: Start Buff Timer"
{
    if (S_SPAWN_BUFF[buffIn] && buffCooldown[buffIn] == S_BUFF_CD[buffIn])
    {
        LogToInspector(<"<0> cooldown started", buffNames[buffIn]>);
        buffTimerRunning[buffIn] = true; // start timer
    }
}

void CreateOrb() "[Buff] :: Create Orb"
{
    canPickupBuff[buffIn] = true;
    buffTimerRunning[buffIn] = false;

    LogToInspector(<"<0> created", buffNames[buffIn]>);
    PlayEffect(All(), PlayEffect.GoodPickupEffect, buffColors[buffIn], buffPos[buffIn], 1);
    PlayEffect(All(), PlayEffect.RingExplosion, buffColors[buffIn], buffPos[buffIn], 3);
    PlayEffect(All(), PlayEffect.RingExplosion, buffColors[buffIn], buffPos[buffIn] + Vector(0, -0.5, 0), 2);
}

rule: "[Buff] :: Remove Buff"
Event.OngoingPlayer
if (playerHasBuff)
if (IsTrueForAll(heldBuffAmmo, Curr() <= 0))
{
    for (Number i = 0; i < buffEnabled.Length; i++)
        buffEnabled[i] = false;

    SmallMessage(player, <"  <0> ammo depleted", heldBuffStr>);

    playerHasBuff = false;

    if (disablePrimaryFire)
    {
        WaitUntil(!IsPrimaryHeld(), 999999);
        disablePrimaryFire = false;
    }
}

globalvar Number[] buffPickupEffectSize;
globalvar Number[] buffTimestamps;

rule: "[Buff] :: Buff Timer Handler"
if (S_ENABLE_BUFFS)
if (matchStarted)
if (validMap)
if (IsTrueForAny(buffCooldown, Curr() != 0))
{
    for (Number i = 0; i < buffNames.Length; i++)
    {
        if (S_SPAWN_BUFF[i] && buffTimerRunning[i])
        {
            // decrement buff cooldown
            SubtractOverTime(buffCooldown[i], S_BUFF_CD[i], 0, S_BUFF_CD[i], 0.032);

            // change buff pickup effect sizes
            buffPickupEffectSize[i] = ((S_BUFF_CD[i] - buffCooldown[i]) / S_BUFF_CD[i]) * 100;

            // create buff
            if (buffCooldown[i] == 0)
            {
                buffIn = i;
                CreateOrb();
            }
        }
    }

    Wait(0.032);
    LoopIfConditionIsTrue();
}

rule: "[Buff] :: Buff Collection"
Event.OngoingPlayer
if (HasSpawned())
if (IsAlive())
if (IsTrueForAny(buffPos, DistanceBetween(Curr(), PositionOf() + Up()) < S_PICKUP_RAD))
{
    buffIn = -1;
    buffIn = IndexOfArrayValue(buffPos, SortedArray(buffPos, DistanceBetween(Curr(), player)).First); // idk if theres a better way to write this

    // if (TotalTimeElapsed() > buffTimestamps[buffIn] + S_BUFF_CD[buffIn] &&
    if ((!playerHasBuff || (buffEnabled[buffIn] && !infAmmo) || (!playerHasBuff && infAmmo)) &&
       (canPickupBuff[buffIn]) &&
       (IsAlive()) && 
       (Update(!IsFiringPrimary()) && Update(!IsFiringSecondary())))
        CollectBuff();

    Wait(1);
    LoopIfConditionIsTrue();
}