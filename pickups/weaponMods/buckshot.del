import "../../main.del";
import ".modMain.del";

globalvar Number S_BUCKSHOT_CHARGE_SPD;
globalvar Number S_BUCKSHOT_CHARGE_AMT;
globalvar Number S_BUCKSHOT_SPREAD;
globalvar Number S_BUCKSHOT_GROUP_AMT;
globalvar Number groupDeg;
globalvar String[] chargeStrArr;
playervar Number chargeLvl;
playervar String chargeStr;
playervar String hasChargeStr;
playervar String noChargeStr;
playervar Number spread;
playervar Boolean canChargeBuckshot;

disabled rule: "---------------- Buckshot ----------------"{}

rule: "[Mod] :: Buckshot : Global Init"
{
    WaitUntil(matchStarted, 1);
    chargeStrArr = ["● ● ● ● ● ● ● ● ● ● ", "○ ○ ○ ○ ○ ○ ○ ○ ○ ○ "];
    groupDeg = 360 / S_BUCKSHOT_GROUP_AMT;
}

rule: "[Mod] :: Buckshot : Init"
Event.OnPlayerJoin
{
    chargeStr = StringSlice(chargeStrArr[1], 0, S_BUCKSHOT_CHARGE_AMT * 2);
    spread = S_BUCKSHOT_SPREAD;
    canChargeBuckshot = true;
}

rule: "[Mod] :: Buckshot : Charge"
Event.OngoingPlayer
if (modEnabled[Mod.Buckshot])
if (heldModAmmo[Mod.Buckshot] > 1)
if (canChargeBuckshot)
if (chargeLvl < S_BUCKSHOT_CHARGE_AMT)
if (IsAlive())
if (IsReloadHeld())
{
    WaitIfTrue(S_BUCKSHOT_CHARGE_SPD);

    chargeLvl++;
    spread += 1;

    if (!infAmmo)
        heldModAmmo[Mod.Buckshot]--;

    hasChargeStr = StringSlice(chargeStrArr[0], 0, chargeLvl * 2);
    noChargeStr = StringSlice(chargeStrArr[1], 0, (S_BUCKSHOT_CHARGE_AMT * 2) - chargeLvl * 2);

    chargeStr = hasChargeStr + noChargeStr;
    PlayEffect(All(), PlayEffect.GoodPickupEffect, MOD_COLORS[Mod.Buckshot], PosOf(), 1);
    PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[Mod.Buckshot], player, spread + 1);
    PlayEffect(player, PlayEffect.BuffImpactSound, null, player, 50);

    LoopIfConditionIsTrue();
}

rule: "[Mod] :: Buckshot : Fire Action"
Event.OngoingPlayer
if (modEnabled[Mod.Buckshot])
if (heldModAmmo[Mod.Buckshot] > 0)
if (IsFiringPrimary())
{
    if (!infAmmo)
        heldModAmmo[Mod.Buckshot]--;

    Wait(0.064);

    canChargeBuckshot = false;

    Vector[] buckshotHitPos! = [];
    Player[] buckshotHitPlayer! = [];
    Any[] buckshotEffects! = [];

    Vector eyePos! = EyePosition();
    Number initBuckshotSpread! = spread;
    Number buckshotProjAmt! = S_BUCKSHOT_GROUP_AMT * (chargeLvl + 1);
    Number numGroups! = buckshotProjAmt / S_BUCKSHOT_GROUP_AMT;
    Number offset! = 0;
    groupDeg = 360 / S_BUCKSHOT_GROUP_AMT;

    for (Number i! = 1; i <= buckshotProjAmt; i++)
    {
        Vector direction = SpreadAngleDirection(player, spread, (i * groupDeg) + offset) * 300;
        buckshotHitPos[i] = RayHit(eyePos, eyePos + direction, AllLiving(), player);
        buckshotHitPlayer[i] = RayPlayer(eyePos, eyePos + direction, AllLiving(), player);

        PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[Mod.Buckshot], buckshotHitPos[i], 0.25);
        CreateBeamEffect(All(), BeamType.BadBeam, gunPos, buckshotHitPos[i], MOD_COLORS[Mod.Buckshot], EffectRev.None);
        buckshotEffects[i] = LastCreatedEntity();

        if (i % S_BUCKSHOT_GROUP_AMT == 0 && i != buckshotProjAmt)
        {
            spread = initBuckshotSpread - (i / S_BUCKSHOT_GROUP_AMT) * (initBuckshotSpread / numGroups);
            offset += groupDeg / 2; // spread rotation offset (degrees)
        }
    }

    Kill(buckshotHitPlayer, player);

    chargeLvl = 0;
    chargeStr = StringSlice(chargeStrArr[1], 0, S_BUCKSHOT_CHARGE_AMT * 2);
    spread = S_BUCKSHOT_SPREAD;

    Wait(0.25);
    DestroyEffect(buckshotEffects);

    canChargeBuckshot = true;
}