import "../../main.del";
import ".modMain.del";

globalvar Number S_BAL_SIZE;
globalvar Number S_BAL_MIN_CHRG;
playervar Any[] balEffect;
playervar Number balCanFire;
disabled rule: "---------------- Ballista ----------------" {}

rule: "[Mod] :: Ballista : Init"
Event.OnPlayerJoin
{
    balCanFire = true;
}

rule: "[Mod] :: Ballista : Fire"
Event.OngoingPlayer
if (modEnabled[Mod.Ballista])
if (balCanFire)
if (IsAlive())
if (IsFiringPrimary())
{
    balCanFire = false;

    if (!infAmmo || buffEnabled[4])
        heldModAmmo[Mod.Ballista]--;

    ApplyImpulse(player, Vector(0, 0.5, 0) + Facing() * -1, 20, Relative.ToWorld, ContraryMotion.Cancel);

    Vector eyePos = EyePosition();
    Vector facing = Facing();

    Any center = eyePos + facing * 300;

    CreateBeamEffect(All(), BeamType.BadBeam, gunPos, center, MOD_COLORS[currentModIdx], EffectRev.VisibleToPositionRadiusAndColor); // center beam
    balEffect = LastCreatedEntity();

    for (Number i! = 1; i < 200; i++)
    {
        Vector pos = eyePos + facing * (i * S_BAL_SIZE);

        PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[Mod.Ballista], pos, S_BAL_SIZE);
        PlayEffect(All(), PlayEffect.BaptisteBioticLauncherExplosionSound, MOD_COLORS[Mod.Ballista], pos, 100);

        Player[] players = FilteredArray(RemoveFromArray(AllLiving(), player), 
        DistanceBetween(PosOf(Curr()) + Up(),              pos) <= S_BAL_SIZE || 
        DistanceBetween(PosOf(Curr()) + Vector(0, 0.5, 0), pos) <= S_BAL_SIZE ||
        DistanceBetween(PosOf(Curr()),                     pos) <= S_BAL_SIZE);

        for (Number j! = 0; j < players.Length; j++)
            Kill(players[j], player);

        if (i % 4 == 0)
            MinWait(); // delay for each explosion, necessary otherwise the server will lagspike upon firing
    }

    DestroyEffect(balEffect);

    Wait(0.75);
    balCanFire = true;
}