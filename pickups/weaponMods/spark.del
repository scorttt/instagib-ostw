import "../../main.del";
import ".modMain.del";

globalvar Number S_SPRK_PROJ_SPEED;
globalvar Number S_SPRK_PROJ_EXPLOSION_SIZE;
globalvar Number S_SPRK_PRIMARY_EXPLOSION_RADIUS;
globalvar Number S_SPRK_HITBOX_RADIUS;
playervar Vector sparkHitPos;
playervar Vector sparkPos;
playervar Vector sparkRayHitStart;
playervar Vector sparkRayHitEnd;
playervar Any sparkEffect;
playervar Boolean isSparkInAir;

disabled rule: "---------------- Spark ----------------"{}

rule: "[Mod] :: Spark : Init"
Event.OnPlayerJoin
{
    sparkPos = Vector(-10000, -10000, -10000);
}

// Boolean sprk_check: Update(DistanceBetween(sparkEyePos, 
// Update(RayHit(EyePos(), EyePos() + Facing() * DistanceBetween(EyePos(), sparkEyePos), AllLiving(), player))) <= S_SPRK_HITBOX_SIZE);
Boolean sparkCheck: Update(AngleBetweenVectors(DirectionTowards(EyePos(), sparkPos), Facing()) <= S_SPRK_HITBOX_RADIUS && IsInLineOfSight(EyePos(), sparkPos));
rule: "[Mod] :: Spark : Fire"
Event.OngoingPlayer
if (modEnabled[Mod.Spark])
if (IsFiringPrimary())
if (Update(firstHp != null))
{
    if (!infAmmo)
        heldModAmmo[Mod.Spark]--;

    if (!sparkCheck)
    {
        sparkHitPos = firstHp;

        Kill(FilteredArray(AllLiving().Remove(player), DistanceBetween(Curr(), sparkHitPos) <= S_SPRK_PRIMARY_EXPLOSION_RADIUS && IsInLineOfSight(Curr(), sparkHitPos)), player);

        PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[Mod.Spark], sparkHitPos, S_SPRK_PRIMARY_EXPLOSION_RADIUS);
    }
    else
    {
        firstHp = RayHit(EyePos(), EyePos() + Facing() * DistanceBetween(EyePos(), sparkPos), AllLiving(), player);
    }
}

rule: "[Mod] :: Spark : Action - Launch Projectile"
Event.OngoingPlayer
if (modEnabled[Mod.Spark])
if (IsButtonHeld(player, Button.Reload))
if (IsAlive())
{
    if (!infAmmo)
        heldModAmmo[Mod.Spark]--;

    disablePrimaryFire = true;

    sparkRayHitStart = EyePos();
    sparkRayHitEnd = EyePos() + Facing() * 50;

    PlayEffect(All(), PlayEffect.RingExplosionSound, null, player, 50);

    DestroyEffect(sparkEffect);

    sparkPos = EyePosition();

    CreateProjectileEffect(All(), ProjectileType.ZaryaGraviton, player, sparkPos, Once(Facing()), S_SPRK_HITBOX_RADIUS / 5);
    sparkEffect[0] = LastCreatedEntity();
    CreateEffect(All(), Effect.GoodAura, MOD_COLORS[Mod.Spark], sparkPos, S_SPRK_HITBOX_RADIUS + 0.1);
    sparkEffect[1] = LastCreatedEntity();
    CreateEffect(player, Effect.Ring, MOD_COLORS[Mod.Spark], RayHit(sparkPos, sparkPos + Down() * 100), S_SPRK_HITBOX_RADIUS);
    sparkEffect[2] = LastCreatedEntity();

    Wait(0.1);
    ChaseVariableAtRate(sparkPos, Update(RayHit(sparkRayHitStart, sparkRayHitEnd, AllLiving(), player)), S_SPRK_PROJ_SPEED, RateChaseReevaluation.DestinationAndRate);
    isSparkInAir = true;

    Wait(0.4); // prevent the player from immediately firing once the projectile is launched
    disablePrimaryFire = false;
    WaitUntil(!isSparkInAir, 999999); // wait until the projectile has detonated
    Wait(1); // prevent immediate projectile firing
    LoopIfConditionIsTrue();
}

void SparkProjectile(in Number size)
{
    StopChasingVariable(sparkPos);

    Kill(FilteredArray(AllLiving().Remove(player), DistanceBetween(Curr(), sparkPos) <= size && IsInLineOfSight(Curr(), sparkPos)), player);

    PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[Mod.Spark], sparkPos, size);
    PlayEffect(All(), PlayEffect.RingExplosion, MOD_COLORS[Mod.Spark], sparkPos, size * 2.5);
    PlayEffect(All(), PlayEffect.ZaryaParticleCannonExplosionEffect, Color.Team1, sparkPos, size * 2.5);

    DestroyEffect(sparkEffect);
    isSparkInAir = false;
    sparkPos = Vector(-10000, -10000, -10000);
}

rule: "[Mod] :: Spark : Action - Projectile Landed"
Event.OngoingPlayer
if (DistanceBetween(sparkPos, RayCastHitPosition(sparkRayHitStart, sparkRayHitEnd, AllLivingPlayers(), player)) < S_SPRK_HITBOX_RADIUS)
{
    SparkProjectile(S_SPRK_PROJ_EXPLOSION_SIZE / 2);
}

rule: "[Mod] :: Spark : Action - Shot Projectile"
Event.OngoingPlayer
if (modEnabled[Mod.Spark])
if (sparkCheck) // projectile hitbox
if (isSparkInAir)
if (IsFiringPrimary())
{
    SparkProjectile(S_SPRK_PROJ_EXPLOSION_SIZE);
}