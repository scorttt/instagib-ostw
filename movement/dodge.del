import "../main.del";

globalvar Number S_DODGE_FORCE;
globalvar Boolean S_DODGE_ENABLED;
playervar Boolean isDodging;
playervar Vector throttle;
playervar Number dodgeForce;

disabled rule: "---------------- Dodge ----------------"{}

rule: "[Dodge] :: Init"
Event.OnPlayerJoin
{
    dodgeForce = S_DODGE_FORCE;
}

rule: "[Dodge] :: Action"
Event.OngoingPlayer
if (S_DODGE_ENABLED)
if (fuel > 0.35)
if (IsAlive())
if (IsButtonHeld(player, Button.Ability1))
{
    isDodging = true;

    if (!infFuel)
        fuel -= 0.35;

    Number y: 0.6;

    // hacky fix for controller users
    throttle = Vector(Near(ThrottleOf().X), y, Near(ThrottleOf().Z));

    if (throttle != Vector(0, y, 0))
    {
        dodgeForce = S_DODGE_FORCE;
    }
    else
    {
        throttle = Vector(0, y, 0);
        dodgeForce = S_DODGE_FORCE / 1.667;
    }

    ApplyImpulse(player, throttle, dodgeForce, Relative.ToPlayer, ContraryMotion.Cancel);

    PlayEffect(All(), PlayEffect.BadExplosion, Color.Orange, PositionOf(), 1);
    PlayEffect(All(), PlayEffect.RingExplosion, Color.Orange, PositionOf(), 2);
    PlayEffect(All(), PlayEffect.DvaMicroMissilesExplosionSound, Color.White, PositionOf(), 100);
    Wait(0.15); // small cooldown
}

rule: "[Dodge] :: Is Not Dodging"
Event.OngoingPlayer
if (Update(IsOnGround() || AltitudeOf() < 0.01))
{
    isDodging = false;
}