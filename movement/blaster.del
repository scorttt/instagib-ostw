import "../main.del";

globalvar Number S_SEC_PSPEED;
globalvar Number S_SEC_RADIUS;
globalvar Number S_SEC_STRENGTH;
globalvar Boolean S_SEC_ENABLED;
playervar Boolean canManuallyDetonateSec;
playervar Vector secProjPos;
playervar Any secOrb;
playervar Vector secProjStart;
playervar Vector secProjEnd;
disabled rule: "---------------- Blaster ----------------"{}

// rule: "[Blaster] :: Projectile"
// Event.OngoingPlayer
// if (S_SEC_ENABLED)
// if (IsButtonHeld(player, Button.SecondaryFire))
// if (IsAlive())
// {
//     CreateProjectile(ProjectileType.EchoStickyBomb, null, RayHit(EyePos(), EyePos() + Facing(), inclplayers: AllLiving(), exclplayers: player), Facing(), 
//     Relative.ToWorld, ModifyHealthType.Heal, Team.Team2, 
//     0, 0, S_SEC_RADIUS,
//     PlayEffect.BadExplosion, PlayEffect.RingExplosionSound,
//     0.05, S_SEC_PSPEED, 2, S_SEC_STRENGTH, 0, 0);
// }

// rule: "[Blaster] :: Init"
// Event.OnPlayerJoin
// {
//     secEyepos = Vector(-10000, -10000, -10000);
// }

playervar Boolean secProjInAir;
rule: "[Blaster] :: Launch Projectile"
Event.OngoingPlayer
if (S_SEC_ENABLED)
if (!secProjInAir)
if (IsButtonHeld(player, Button.SecondaryFire))
if (IsAlive())
{
    if (secProjInAir)
    {
        BlasterProjectileImpulse();
    }

    DestroyEffect(secOrb);

    MinWait();

    secProjStart = EyePos();
    secProjEnd = EyePosition() + Facing() * 300;
    secProjPos = secProjStart;

    PlayEffect(All(), PlayEffect.RingExplosionSound, null, player, 50);

    // CreateProjectile(
    //             ProjectileType: ProjectileType.EchoStickyBomb,
    //             Player: null,
    //             StartPosition: Update(EyePos() + Facing()),
    //             Direction: Update(Facing()),
    //             Relative: Relative.ToWorld,
    //             ModifyHealthType: ModifyHealthType.Damage,
    //             AffectedTeam: Team.All,
    //             Amount: 0,
    //             AmountScalar: 1,
    //             ExplosionRadius: S_SEC_RADIUS,
    //             ExplosionEffect: PlayEffect.GoodExplosion,
    //             ExplosionSoundEffect: PlayEffect.ExplosionSound,
    //             Oversize: 0,
    //             Speed: S_SEC_PSPEED,
    //             Lifetime: 1,
    //             Impulse: 0,
    //         );

    CreateProjectileEffect(
        VisibleTo: All(),
        ProjectileType: ProjectileType.EchoStickyBomb, 
        FriendlyTo: null, 
        Position: secProjPos,
        Direction: DirectionTowards(secProjPos, secProjEnd), 
        Oversize: 0, 
        Reevaluation: ProjectileEffectReeval.VisibleToFriendlyToPositionDirectionAndSize
    );
    secOrb = LastCreatedEntity();

    secProjInAir = true;

    ChaseVariableAtRate(secProjPos, RayHit(secProjStart, secProjEnd, RemoveFromArray(AllLiving(), player), player), S_SEC_PSPEED, RateChaseReevaluation.DestinationAndRate);

    Wait(1);
}

rule: "[Blaster] :: Projectile Impulse"
Event.OngoingPlayer
if (secProjInAir)
if (DistanceBetween(secProjPos, RayHit(secProjStart, secProjEnd, RemoveFromArray(AllLiving(), player), player)) < 0.5 || (IsButtonHeld(player, Button.SecondaryFire) && canManuallyDetonateSec))
{
    BlasterProjectileImpulse();
}

void BlasterProjectileImpulse() "[Blaster] :: Projectile Impulse"
{
    secProjInAir = false;
    canManuallyDetonateSec = false;
    DestroyEffect(secOrb);

    StopChasingVariable(secProjPos);

    Any[] players! = [];
    MinWait();
    players = FilteredArray(AllLiving(), (DistanceBetween(Curr(), secProjPos) <= S_SEC_RADIUS) 
            || DistanceBetween(EyePos(Curr()), secProjPos) <= S_SEC_RADIUS 
            || DistanceBetween(PosOf(Curr()), secProjPos) <= S_SEC_RADIUS);

    for (Number i! = 0; i < players.Length; i++)
    {
        Vector direction! = DirectionTowards(secProjPos, players[i]);
        direction = direction - Vector(0, direction.Y, 0);
        ApplyImpulse(players[i], direction + Up(), S_SEC_STRENGTH, Relative.ToWorld, ContraryMotion.Incorporate);
    }

    Damage(RemoveFromArray(players, player), player, 0.4);
    PlayEffect(All(), PlayEffect.GoodExplosion, Color.Red, secProjPos, S_SEC_RADIUS);
}

rule: "[Blaster] :: Projectile Effect Loop"
Event.OngoingPlayer
if (secProjInAir)
{
    PlayEffect(All(), PlayEffect.BadExplosion, Color.Red, secProjPos, 0.1);
    MinWait();
    LoopIfConditionIsTrue();
}
rule: "[Blaster] :: Projectile Misc Loop"
Event.OngoingPlayer
if (secProjInAir)
{
    WaitUntil(!IsSecondaryHeld() && DistanceBetween(secProjStart, secProjPos) > 10, 99999);
    canManuallyDetonateSec = true;
}
