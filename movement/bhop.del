import "../main.del";

globalvar Number S_BHOP_MAX_SPEED;
globalvar Number S_BHOP_SPEED_RATE;
globalvar Boolean S_BHOP_ENABLED;

playervar Boolean bhopping; // is the player bhopping
playervar Boolean autoBhop; // is the player auto bhopping
playervar Number bhopSpeedPercent; // movement speed multiplier
playervar Number bhopSpeedRate; // bhop speed rate
playervar Number bhopSpeedFloor; // default movement speed multiplier (modified by mutators like berkserk or stimpack ability)

globalvar Number MIN_SPEED; // minimum bhop speed

disabled rule: "---------------- Bhop ----------------"{}

void ResetSpeed() playervar "[Bhop] :: Reset Speed"
{
    StopChasingVariable(bhopSpeedPercent);
    bhopping = false;
    expectedSpeed = 0;
    lastSlowDown = 0;
    bhopSpeedPercent = bhopSpeedFloor;
    SetMoveSpeed(player, bhopSpeedPercent);
}

rule: "[Bhop] :: Init"
Event.OnPlayerJoin
{
    bhopSpeedFloor = S_MOVE_SPEED;
    bhopSpeedPercent = bhopSpeedFloor;
    bhopSpeedRate = S_BHOP_SPEED_RATE;
    bhopRewardFactor = 0.3;
}

rule: "[Bhop] :: Auto Hop"
Event.OngoingPlayer
if (S_BHOP_ENABLED)
// if (!isSliding)
if (IsOnGround())
if (!IsButtonHeld(player, Button.Crouch))
if (IsJumpHeld())
{
    autoBhop = true;
    DisallowButton(player, Button.Jump);
    MinWait();
    AllowButton(player, Button.Jump);

    if (!IsJumping())
        autoBhop = false;
}

rule: "[Bhop] :: Gain Speed Chase"
Event.OngoingPlayer
if (S_BHOP_ENABLED)
if (IsInAir())
if (HorizontalSpeedOf() > MIN_SPEED/*  || isSliding */)
{
    ChaseVariableAtRate(bhopSpeedPercent, S_BHOP_MAX_SPEED, bhopSpeedRate, RateChaseReevaluation.DestinationAndRate);
    bhopping = true;
}

rule: "[Bhop] :: Too Slow"
Event.OngoingPlayer
if (bhopping) 
if (HorizontalSpeedOf() < MIN_SPEED)
{
    ResetSpeed();
}

playervar Number horizontalSpeed;
playervar Number expectedSpeed;
playervar Number lastSlowDown;
playervar Number rewardSpeedPercentage; // percentage of speed increase when going faster than expected
playervar Number penaltySpeedPercentage;
playervar Number bhopRewardFactor;

rule: "[Bhop] :: Speed Adjustment Loop"
Event.OngoingPlayer
if (bhopping)
if (HorizontalSpeedOf() > MIN_SPEED)
{
    horizontalSpeed = HorizontalSpeedOf();
    // 5.5 is the expected speed with no movement speed modifiers (usually every character's forwards speed besides genji/tracer) 0.1 buffer to account for minor speed variations in movement
    expectedSpeed = 5.5 * (bhopSpeedPercent / 100) - 0.1;

    if (expectedSpeed != 0)
    {
        if (horizontalSpeed <= expectedSpeed) // punish player, we know they slowed down from a wall or something because their current speed is lower than expected
        {
            lastSlowDown = horizontalSpeed;

            // move speed percentage penalization relative to the speed that they were going as their last slowdown
            penaltySpeedPercentage = ((lastSlowDown / expectedSpeed) * 100);
            bhopSpeedPercent = Max(bhopSpeedPercent - penaltySpeedPercentage, bhopSpeedFloor);
        }
        else if (horizontalSpeed - 0.2 > expectedSpeed) // reward player for going faster than expected
        {
            // reward player move speed percentage for going faster than expected relative to the speed boost they got
            rewardSpeedPercentage = ((horizontalSpeed / expectedSpeed) * 100) * bhopRewardFactor;
            bhopSpeedPercent = Min(bhopSpeedPercent + rewardSpeedPercentage, S_BHOP_MAX_SPEED);

            expectedSpeed = horizontalSpeed - 0.1;
        }
    }

    SetMoveSpeed(player, bhopSpeedPercent);
    Wait(0.032);
    LoopIfConditionIsTrue();

    lastSlowDown = 0;
    expectedSpeed = 0;
}

rule: "[Bhop] :: Player on ground"
Event.OngoingPlayer
if (IsOnGround())
if (!autoBhop)
if (bhopSpeedPercent > bhopSpeedFloor)
{
    WaitIfTrue(0.25);
    ResetSpeed();
}