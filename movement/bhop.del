import "../main.del";

globalvar Number S_BHOP_MAX_SPEED;
globalvar Number S_BHOP_SPEED_RATE;
globalvar Boolean S_BHOP_ENABLED;

playervar Boolean bhopping; // is the player bhopping
playervar Boolean autoBhop; // is the player auto bhopping
playervar Number bhopSpeedPercent; // movement speed multiplier
playervar Number bhopSpeedRate; // bhop speed rate
playervar Number bhopSpeedFloor; // default movement speed multiplier (modified by mutators like berkserk or stimpack ability)

playervar Number minSpeed; // minimum bhop speed

disabled rule: "---------------- Bhop ----------------"{}

void ResetSpeed() playervar "[Bhop] :: Reset Speed"
{
    StopChasingVariable(bhopSpeedPercent);
    bhopping = false;
    expectedSpeed = 0;
    lastSpeedWhenHitWall = 0;
    bhopSpeedPercent = bhopSpeedFloor;
    SetMoveSpeed(player, bhopSpeedPercent);
}

rule: "[Bhop] :: Init"
Event.OnPlayerJoin
{
    minSpeed = 5.5 * (S_MOVE_SPEED / 100) * 0.91; // account for backwards speed, seems to be 10% slower than moving forward with some buffer just in case
    bhopSpeedFloor = S_MOVE_SPEED;
    bhopSpeedPercent = bhopSpeedFloor;
    bhopSpeedRate = S_BHOP_SPEED_RATE;
}

rule: "[Bhop] :: Auto Hop"
Event.OngoingPlayer
if (S_BHOP_ENABLED)
if (!isSliding)
if (IsOnGround())
if (!IsButtonHeld(player, Button.Crouch))
if (IsJumpHeld())
{
    autoBhop = true;
    DisallowButton(player, Button.Jump);
    MinWait();
    AllowButton(player, Button.Jump);

    if (!IsJumping())
        autoBhop = false;
}

rule: "[Bhop] :: Gain Speed"
Event.OngoingPlayer
if (S_BHOP_ENABLED)
if (IsInAir())
if (HorizontalSpeedOf() > minSpeed || isSliding)
{
    ChaseVariableAtRate(bhopSpeedPercent, S_BHOP_MAX_SPEED, bhopSpeedRate, RateChaseReevaluation.DestinationAndRate);
    bhopping = true;
    SetMoveSpeed(player, bhopSpeedPercent);
}

// rule: "[Bhop] :: Update Speed"
// Event.OngoingPlayer
// if (bhopping || isSliding)
// {
//     SetMoveSpeed(player, moveSpeedPercent);
//     Wait(0.064);
//     LoopIfConditionIsTrue();
// }

rule: "[Bhop] :: Too Slow"
Event.OngoingPlayer
if (bhopping || isSliding) 
if (HorizontalSpeedOf() < minSpeed)
{
    ResetSpeed();
}

// playervar Vector wishDir;
// rule: "[Bhop] :: Continue Moving Forward"
// Event.OngoingPlayer
// if (bhopping) 
// if (ThrottleOf().Z < 0.5)
// {
//     // scuffed quake-like air strafing, if the player has enough speed and is not holding w, then we can allow them to continue moving forward
//     if (ThrottleOf().Z < 0.5)
//     {
//         wishDir = Vector(Facing().X, 0, Facing().Z);
//         StartThrottleInDirection(player, wishDir, 1, Relative.ToWorld);
//     }

//     WaitUntil(ThrottleOf().Z > 0.5 || !bhopping, 999999);
//     StopThrottleInDirection(player);
//     wishDir = null;
// }

playervar Number horizontalSpeed;
playervar Number expectedSpeed;
playervar Number lastSpeedWhenHitWall;
playervar Number rewardSpeedPercentage; // percentage of speed increase when going faster than expected
playervar Number penaltySpeedPercentage;
rule: "[Bhop] :: Speed Adjustment Loop"
Event.OngoingPlayer
if (bhopping)
if (!isSliding)
{
    horizontalSpeed = HorizontalSpeedOf();
    // 5.5 is the expected speed with no movement speed modifiers (usually every character's forwards speed besides genji/tracer), 0.1 is a buffer to account for minor speed variations
    expectedSpeed = 5.5 * (bhopSpeedPercent / 100) - 0.1;

    // record the last speed when hitting a wall based on their current speed, if its lower than expected (e.g. its not 5.5 * moveSpeedPercent / 100) then we know they hit a wall and we can penalize them
    if (horizontalSpeed < expectedSpeed)
    {
        lastSpeedWhenHitWall = horizontalSpeed;

        // penalize player move speed percentage for hitting walls relative to the speed that they were going as the hit the wall
        // 2.5 is a penalty factor, can be adjusted to make it more or less punishing. higher is less punishing, lower is more punishing. can just remove the division to make it technically "correct" but thats not fun
        penaltySpeedPercentage = ((lastSpeedWhenHitWall / expectedSpeed) * 100) / 2.5;
        bhopSpeedPercent = Max(bhopSpeedPercent - penaltySpeedPercentage, bhopSpeedFloor);
    }
    else if (horizontalSpeed - 0.5 > expectedSpeed && !isDodging) // if the player is actually going faster than expected, then we can instead reward the player by increasing their speed
    {
        // reward player move speed percentage for going faster than expected relative to the speed boost they got
        rewardSpeedPercentage = ((horizontalSpeed / expectedSpeed) * 100) / 2.5;
        bhopSpeedPercent = Min(bhopSpeedPercent + rewardSpeedPercentage, S_BHOP_MAX_SPEED);
    }

    SetMoveSpeed(player, bhopSpeedPercent);
    Wait(0.064);
    LoopIfConditionIsTrue();
    lastSpeedWhenHitWall = 0;
    expectedSpeed = 0;
}


rule: "[Bhop] :: Player too slow but on ground"
Event.OngoingPlayer
if (IsOnGround())
if (!autoBhop)
if (bhopSpeedPercent > bhopSpeedFloor)
{
    WaitIfTrue(0.25);
    ResetSpeed();
}