import "../macros-ostw/main.del";
// import "settings.json";

// import "../workshop-scripts/ruler.del";
import "dbgsettings.json";
import "debug.del";

import "hudtext.del";

import "movement/fuel.del";
import "movement/bhop.del";
// import "movement/beam.del";
import "movement/blaster.del";
import "movement/dodge.del";
import "movement/jetpack.del";
import "movement/hover.del";

import "pickups/init.del";

import "pickups/weaponMods/.modMain.del";
import "pickups/weaponMods/wallbang.del";
import "pickups/weaponMods/ricochet.del";
import "pickups/weaponMods/buckshot.del";
import "pickups/weaponMods/prism.del";
import "pickups/weaponMods/ballista.del";
import "pickups/weaponMods/electro.del";
import "pickups/weaponMods/spark.del";
import "pickups/weaponMods/arc.del";
import "pickups/weaponMods/needle.del";

import "pickups/buffs/.buffMain.del";
import "pickups/buffs/denial.del";
import "pickups/buffs/seer.del";
import "pickups/buffs/berserk.del";

import "pickups/collectables/.cmain.del";
import "pickups/collectables/timer.del";
import "pickups/collectables/adrenaline.del";
import "pickups/collectables/ammo.del";

globalvar String txCharacter;
String TXString(String value): "{0}TX {1}>".Format([txCharacter, value]);

globalvar Number S_MATCH_TIME_LIMIT; // maximum match time
globalvar Number S_PICKUP_RAD; // minimum radius to collect a mod
// globalvar Number S_GAMEMODE; // chosen gamemode
globalvar Number S_DELAY; // weapon fire delay
globalvar Number S_MOVE_SPEED; // player move speed
globalvar Number S_ABILITY_CHARGE_TIME; // ability charge time
globalvar Boolean matchStarted; // has the match started 
globalvar Boolean initilized;
playervar Boolean info; // information toggle
playervar Boolean disablePrimaryFire; // disables primary fire (e.g. for owning volt or denial being in use)
playervar Vector gunPos; // arbitrary position of the gun
playervar Number delay; // weapon fire delay for the player
playervar Vector firstHp;

Any WeaponMuzzle(Vector startPos, Vector dir): Update(startPos + dir + WorldVectorOf(Right(), player) * 0.18 + Normalize(Cross(dir, WorldVectorOf(Right(), player))) * 0.22);
disabled rule: "---------------- Main ----------------"{}

rule: "[Main] :: Initial Global"
{
    # unsanitized string stuff for tx strings, might break in future updates
    CreateDummyBot(<Hero>AllHeroes(), <Team>host, false, null, null);
    StartForcingDummyBotName(LastCreatedEntity(), "______________________________________________________________________________________________________________________________〼");
    txCharacter = StringSplit(FirstOf(LastCreatedEntity()), EmptyArray());
    StartForcingDummyBotName(LastCreatedEntity(), "______________________________________________________________________________________________________________________________ࡀ");
    txCharacter = StringSlice(StringReplace("______________________________________________________________________________________________________________________________〼", txCharacter, FirstOf(LastCreatedEntity())), 126, true);
    DestroyAllDummyBots();

    DisableInspectorRecording();
    DisableCompletion();
    DisableAnnouncer();

    SetMatchTime(1);

    matchStarted = false; 

    // S_GAMEMODE = WorkshopSettingCombo("A. General",                             "Gamemode", 0, ["Deathmatch", "Team Deathmatch", "4TDM", "Limited TDM", "Freeze Tag TDM", "Keepaway FFA", "Keepaway TDM", "Domination TDM", "Domination 4TDM"], 1);
    S_MATCH_TIME_LIMIT = WorkshopSettingInteger("A. General",                   "Match Time (Minutes) (20)", 20, 1, 60, 3) * 60;
    S_PICKUP_RAD = WorkshopSettingReal("A. General",                            "Pickup Collection Radius (1.25)", 1.25, 0.5, 3, 4);
    S_DELAY = WorkshopSettingReal("A. General",                                 "Weapon Fire Delay (1.11)", 1.11, 0.6, 5, 5);
    S_MOVE_SPEED = WorkshopSettingReal("A. General",                            "General Move Speed (135)", 135, 50, 300, 6);
    S_ABILITY_CHARGE_TIME = WorkshopSettingReal("A. General",                   "Ability Charge Time (60)", 60, 1, 600, 7) / 100;

    S_SEC_ENABLED = WorkshopSettingToggle("B. Blaster (Secondary Fire)",        "Enable Blaster (On)", true, 1);
    S_SEC_PSPEED = WorkshopSettingReal("B. Blaster (Secondary Fire)",           "Blaster Projectile Speed (60)", 60, 1, 500, 3);
    S_SEC_RADIUS = WorkshopSettingReal("B. Blaster (Secondary Fire)",           "Blaster Explosion Radius (2.5)", 2.5, 1, 20, 4);
    S_SEC_STRENGTH = WorkshopSettingReal("B. Blaster (Secondary Fire)",         "Blaster Explosion Strength (15)", 15, 1, 100, 5); 

    S_JETPACK_ENABLED = WorkshopSettingToggle("C. Jetpack",                     "Enable Jetpack (On)", true, 1);
    S_FUEL_DEP = WorkshopSettingReal("C. Jetpack",                              "Jetpack Fuel Full Depletion Time (1.3)", 1.3, 0.1, 1000, 2);
    S_FUEL_REF = WorkshopSettingReal("C. Jetpack",                              "Jetpack Fuel Total Time For Full Replenish (1)", 1, 0.1, 1000, 3);   

    // S_ENABLE_BEAM = WorkshopSettingToggle("B. Knockback Beam",                  "Enable Beam (On)", true, 1);
    // S_BEAM_DMG = WorkshopSettingReal("B. Knockback Beam",                       "Beam Damage Per Tick (1)", 1, 0, 10) / 25;
    // S_BEAM_PLAYER_KNOCKBACK_STRENGTH = WorkshopSettingReal("B. Knockback Beam", "Hit Player Knockback Strength (10)", 10, 1, 20, 2);
    // S_BEAM_USER_KNOCKBACK_STRENGTH = WorkshopSettingReal("B. Knockback Beam",   "User Knockback Strength (0.37)", 0.37, 0, 100, 3);

    S_DODGE_ENABLED = WorkshopSettingToggle("D. Dodge",                         "Enable Dodge (On)", true, 1);
    S_DODGE_FORCE = WorkshopSettingReal("D. Dodge",                             "Dodge Strength (14)", 14, 1, 100, 2);
    S_DODGE_FUEL_COST = WorkshopSettingReal("D. Dodge",                         "Dodge Fuel Cost (30%)", 30, 0, 100, 3) / 100;

    S_BHOP_ENABLED = WorkshopSettingToggle("E. Bunny Hopping",                  "Enable Bunny Hopping (On)", true, 1);
    S_BHOP_MAX_SPEED = WorkshopSettingInteger("E. Bunny Hopping",               "Maximum Speed Multiplier From Bunny Hopping (100000)", 100000, 200, 100000, 2);
    S_BHOP_SPEED_RATE = WorkshopSettingReal("E. Bunny Hopping",                 "Speed gain rate (9.8)", 9.8, 1, 100, 3);

    S_ENABLE_MODS = WorkshopSettingToggle("F. Mods",                          "Enable Mods (On)", true, 1);
    S_RANDOMIZE_MOD_POS = WorkshopSettingToggle("F. Mods",                    "Randomize Mod Locations (On)", true, 2);

    S_SPAWN_MOD[Mod.Pierce] = WorkshopSettingToggle("G. Pierce Mod",                   "Spawn Pierce (On)", true, 1);
    S_MOD_CD[Mod.Pierce] = WorkshopSettingInteger("G. Pierce Mod",                     "Pierce Spawn Time (75)", 75, 5, 600, 2);
    S_MOD_AMMO[Mod.Pierce] = WorkshopSettingInteger("G. Pierce Mod",                   "Pierce Ammo (20)", 20, 1, 1000, 3);
    S_NUM_PIERCES = WorkshopSettingInteger("G. Pierce Mod",                  "Amount Of Surfaces to Pierce (3)", 3, 1, 16, 4);
    S_MAX_THICKNESS = WorkshopSettingInteger("G. Pierce Mod",                  "Maximum Surface Thickness to Pierce (0 disables check)", 0, 0, 100, 4);

    S_SPAWN_MOD[Mod.Ricochet] = WorkshopSettingToggle("H. Ricochet Mod",                 "Spawn Ricochet (On)", true, 1);
    S_MOD_CD[Mod.Ricochet] = WorkshopSettingInteger("H. Ricochet Mod",                   "Ricochet Spawn Time (80)", 80, 5, 600, 2);
    S_MOD_AMMO[Mod.Ricochet] = WorkshopSettingInteger("H. Ricochet Mod",                 "Ricochet Ammo (15)", 15, 1, 1000, 3);
    S_NUM_RICOCHETS = WorkshopSettingInteger("H. Ricochet Mod",                "Ricochet Maximum Bounces (5)", 5, 1, 24, 4);

    S_SPAWN_MOD[Mod.Buckshot] = WorkshopSettingToggle("I. Spread Mod",                 "Spawn Spread (On)", true, 1);
    S_MOD_CD[Mod.Buckshot] = WorkshopSettingInteger("I. Spread Mod",                   "Spread Spawn Time (210)", 210, 5, 600, 2);
    S_MOD_AMMO[Mod.Buckshot] = WorkshopSettingInteger("I. Spread Mod",                 "Spread Ammo (24)", 24, 1, 1000, 3);
    S_BUCKSHOT_CHARGE_AMT = WorkshopSettingInteger("I. Spread Mod",          "Spread Charge Amount (5)", 5, 1, 10, 4);
    S_BUCKSHOT_CHARGE_SPD = WorkshopSettingReal("I. Spread Mod",             "Spread Charge Speed (0.4)", 0.4, 0.3, 5, 5);
    S_BUCKSHOT_SPREAD = WorkshopSettingReal("I. Spread Mod",                 "Spread Radius (Lower is Tighter) (1.2)", 1.2, 0.1, 20, 6);
    S_BUCKSHOT_GROUP_AMT = WorkshopSettingInteger("I. Spread Mod",           "Spread Bullets Per Group (8)", 8, 3, 12, 7);

    S_SPAWN_MOD[Mod.Prism] = WorkshopSettingToggle("J. Prism Mod",                    "Spawn Prism (On)", true, 1);
    S_MOD_CD[Mod.Prism] = WorkshopSettingInteger("J. Prism Mod",                      "Prism Spawn Time (195)", 195, 5, 600, 2);
    S_MOD_AMMO[Mod.Prism] = WorkshopSettingInteger("J. Prism Mod",                    "Prism Ammo (10)", 10, 1, 1000, 3);

    S_SPAWN_MOD[Mod.Ballista] = WorkshopSettingToggle("K. Ballista Mod",                 "Spawn Ballista (On)", true, 1);
    S_MOD_CD[Mod.Ballista] = WorkshopSettingInteger("K. Ballista Mod",                   "Ballista Spawn Time (240)", 240, 5, 600, 2);
    S_MOD_AMMO[Mod.Ballista] = WorkshopSettingInteger("K. Ballista Mod",                 "Ballista Ammo (1)", 1, 1, 1000, 3);
    S_BAL_SIZE = WorkshopSettingReal("K. Ballista Mod",                        "Ballista Explosion Size (3)", 3, 0.5, 20, 4);

    S_SPAWN_MOD[Mod.Electro] = WorkshopSettingToggle("L. Electro Mod",                  "Spawn Electro (On)", true, 1);
    S_MOD_CD[Mod.Electro] = WorkshopSettingInteger("L. Electro Mod",                    "Electro Spawn Time (100)", 100, 5, 600, 2);
    S_MOD_AMMO[Mod.Electro] = WorkshopSettingInteger("L. Electro Mod",                  "Electro Ammo (20)", 20, 1, 1000, 3);
    S_ELECTRO_PROJ_DELAY = WorkshopSettingReal("L. Electro Mod",               "Electro Grenade Delay After Hitting a surface (0.35)", 0.35, 0, 2, 4);
    S_ELECTRO_PROJ_EXPLOSION_RADIUS = WorkshopSettingReal("L. Electro Mod",                     "Electro Grenade Explosion Radius (5)", 5, 1, 20, 5);
    S_ELECTRO_PROJ_SPEED = WorkshopSettingReal("L. Electro Mod",                   "Electro Grenade Projectile Speed (25)", 25, 1, 50, 6);
    S_ELECTRO_PROJ_GRAV = WorkshopSettingReal("L. Electro Mod",                    "Electro Grenade Projecitile Gravity (-15)", -15, -100, 100, 7);
    S_ELECTRO_PDELTA = WorkshopSettingReal("L. Electro Mod",                   "Electro Grenade Projectile Delta (Vertical Offset) (0.1)", 0.1, -1, 1, 8);
 
    S_SPAWN_MOD[Mod.Spark] = WorkshopSettingToggle("M. Spark Mod",                    "Spawn Spark (On)", true, 1);
    S_MOD_CD[Mod.Spark] = WorkshopSettingInteger("M. Spark Mod",                      "Spark Spawn Time (125)", 125, 5, 600, 2);
    S_MOD_AMMO[Mod.Spark] = WorkshopSettingInteger("M. Spark Mod",                    "Spark Ammo (20)", 20, 1, 1000, 3);
    S_SPRK_PRIMARY_EXPLOSION_RADIUS = WorkshopSettingReal("M. Spark Mod",                      "Spark Primary Explosion Size (2)", 2, 1, 10, 5);
    S_SPRK_PROJ_SPEED = WorkshopSettingReal("M. Spark Mod",                        "Spark Projectile Speed (20)", 20, 1, 500, 4);
    S_SPRK_PROJ_EXPLOSION_SIZE = WorkshopSettingReal("M. Spark Mod",                        "Spark Projectile Explosion Size (5)", 5, 1, 100, 5);
    S_SPRK_HITBOX_RADIUS = WorkshopSettingReal("M. Spark Mod",                   "Spark Projectile Hitbox Size (0.3)", 0.3, 0.1, 10, 7);

    S_SPAWN_MOD[Mod.Arc] = WorkshopSettingToggle("N. Arc Mod",                      "Spawn Arc (On)", true, 1);
    S_MOD_CD[Mod.Arc] = WorkshopSettingInteger("N. Arc Mod",                        "Arc Spawn Time (195)", 195, 5, 600, 2);
    S_MOD_AMMO[Mod.Arc] = WorkshopSettingInteger("N. Arc Mod",                      "Arc Ammo (540)", 540, 1, 10000, 3);
    S_ARC_BOUNCES = WorkshopSettingInteger("N. Arc Mod",                       "Arc Maximum Bounces (4)", 4, 1, 24, 5) + 1; // unsure why i have to add 1 here and not on ricochet

    S_SPAWN_MOD[Mod.Needle] = WorkshopSettingToggle("O. Needle Mod",                "Spawn Needle Mod (On)", true, 1);
    S_MOD_CD[Mod.Needle] = WorkshopSettingInteger("O. Needle Mod",                  "Needle Spawn Time (195)", 195, 5, 600, 2);
    S_MOD_AMMO[Mod.Needle] = WorkshopSettingInteger("O. Needle Mod",                "Needle Ammo (1000)", 1000, 1, 100000, 3);

    S_SPAWN_MOD[Mod.Volt] = WorkshopSettingToggle("P. Volt Mod",                     "Spawn Volt (On)", true, 1);
    S_MOD_CD[Mod.Volt] = WorkshopSettingInteger("P. Volt Mod",                       "Volt Spawn Time (165)", 165, 5, 600, 2);
    S_MOD_AMMO[Mod.Volt] = WorkshopSettingReal("P. Volt Mod",                        "Volt Ammo (150)", 150, 1, 10000, 3);
    S_VLT_DMG = WorkshopSettingReal("P. Volt Mod",                             "Volt Damage (15)", 10, 0.04, 300, 4) / 25;
    S_MAX_VLT_SPREAD = WorkshopSettingReal("P. Volt Mod",                      "Volt Maximum Spread (Lower is Tighter) (17)", 17, 0, 100, 5);
    S_MAX_VLT_DIST = WorkshopSettingReal("P. Volt Mod",                        "Volt Maximum Distance (100)", 100, 1, 300, 6);
    S_MIN_VLT_DIST = WorkshopSettingReal("P. Volt Mod",                        "Volt Minimum Distance (2)", 2, 1, 300, 7);
    S_VLT_TIME = WorkshopSettingReal("P. Volt Mod",                            "Volt Overheat Time (3)", 3, 0.1, 10, 8);

    S_ENABLE_BUFFS = WorkshopSettingToggle("Q. Buffs",                    "Enable Buffs (On)", true, 1);
    S_RANDOM_BUFF_COOLDOWN = WorkshopSettingToggle("Q. Buffs",            "Randomize Relative Spawn Time (On)", true, 2);
    S_BUFF_CD = WorkshopSettingInteger("Q. Buffs",                              "Buff Spawn Time (180)", 180, 5, 600, 3);
    S_BUFF_CREATION = WorkshopSettingInteger("Q. Buffs",                        "Buff Creation Time (15)", 15, 1, 600, 4);
    S_BUFF_DURATION = WorkshopSettingInteger("Q. Buffs",                        "Buff Duration (40)", 40, 5, 600, 5);

    S_SPAWN_BUFF[0] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Seer (On)", true, 0);
    S_SPAWN_BUFF[1] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Dummy NYI (On)", false, 1);
    S_SPAWN_BUFF[2] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn NYI (On)", false, 2);
    S_SPAWN_BUFF[3] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Poison NYI (On)", false, 3);
    S_SPAWN_BUFF[4] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Berserk (On)", true, 4);
    S_SPAWN_BUFF[5] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Replicate NYI (On)", false, 5);
    S_SPAWN_BUFF[6] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Denial (On)", true, 6);
    S_SPAWN_BUFF[7] = WorkshopSettingToggle("R. Buff Spawning",               "Spawn Mirage NYI (On)", false, 7);

    if (!S_ENABLE_MODS)
    {
        for (Number i! = 0; i < S_SPAWN_MOD.Length; i++)
            S_SPAWN_MOD[i] = false;
    }

    if (S_ENABLE_BUFFS)
    {
        buffIndex = [];
        for (Number i! = 0; i < S_SPAWN_BUFF.Length; i++)
        {
            if (S_SPAWN_BUFF[i])
                buffIndex = Append(buffIndex, i); // populate m_in with the indices of the buffs that are enabled
        }
    }

    MIN_SPEED = 5.5 * (S_MOVE_SPEED / 100) * 0.91; // account for backwards speed, seems to be 10% slower than moving forward with some moder just in case
    initilized = true;
}

rule: "[Main] :: Start Match"
if (!matchStarted)
if (IsGameInProgress())
if (AllLiving().Length >= 1)
{
    LogToInspector("Match Started"); 
    SetMatchTime(S_MATCH_TIME_LIMIT);
    matchStarted = true;

    if (validMap)
    {
        if (S_ENABLE_MODS)
        {
            for (Number i! = 0; i < S_MOD_CD.Length; i++)
            {
                modIdx = i;
                ModCooldown();
            }
        }

        if (S_ENABLE_BUFFS)
        {
            SetBuffPosition();
            StartBuffTimer(); 
        }
    }
}

rule: "[Main] :: Player Join/Init"
Event.OnPlayerJoin
{
    WaitUntil(initilized, 3);
    if (validMap)
    {
        CreateEffect(IsAlive() && playerHasMod && !HasStatus(player, Status.PhasedOut) ? All() : null, Effect.GoodAura, modColor, player, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
        CreateEffect(IsAlive() && playerHasBuff ? All() : null, Effect.BadAura, buffColors[1], player, 0.5, EffectRev.VisibleToPositionRadiusAndColor);
    }

    if (S_JETPACK_ENABLED)
    {
        CreateEffect(IsAlive() && isFlying ? All() : null, Effect.EchoFocusingBeamSound, Color.White, PositionOf(), 100);
    }

    DisableGameModeHud();
    DisallowButton(player, Button.PrimaryFire);
    DisallowButton(player, Button.Ultimate);
    StartScalingPlayer(player, 1.10);

    // TODO: remove this and make this an option in a radial wheel
    equippedAbility = Ability.Stimpack; 

    delay = S_DELAY;
    playerHasMod = false;
    playerHasBuff = false;
}

rule: "[Main] :: Player Dead"
Event.OnDeath
{
    StopForcingPlayerOutlines(player, All());
}

rule: "[Main] :: Primary Fire Enabled"
Event.OngoingPlayer
if (!disablePrimaryFire)
{
    AllowButton(player, Button.PrimaryFire);
}

rule: "[Main] :: Primary Fire Disabled"
Event.OngoingPlayer
if (disablePrimaryFire)
{
    DisallowButton(player, Button.PrimaryFire);
}

rule: "[Main] :: Player Alive"
Event.OngoingPlayer
if (IsAlive())
{
    fuel = 1;

    // check seer users and apply outlines to the new player
    if (buffUser.buffEnabled[0])
        StartForcingPlayerOutlines(player, buffUser, true, buffColors[1], OutlineType.Always);

    Wait(1);
    canPickupBuff = true;
    SetMaxHealth(player, (100 / MaxHealth()) * 100);
    SetMoveSpeed(player, S_MOVE_SPEED);
}

playervar Boolean firingPrimary;
rule: "[Main] :: Server Fire"
Event.OngoingPlayer
if (!disablePrimaryFire)
if (IsAlive())
if (IsPrimaryHeld())
{
    AllowButton(player, Button.PrimaryFire);
    PressButton(player, Button.PrimaryFire);

    firingPrimary = true;
    MinWait();

    DisallowButton(player, Button.PrimaryFire);
    firingPrimary = false;

    Wait(delay);
    LoopIfConditionIsTrue();
}


rule: "[Main] :: Bullet Trail"
Event.OngoingPlayer
if (playerHasMod)
if (firingPrimary)
{
    Wait(0.064); // this shit is so ass !!! stupid wait for the beam to better align with illari firing, will still be unaligned during mouse movement no matter what

    // if (playerHasMod)
    // {
        gunPos = WeaponMuzzle(EyePos(), Facing());
        firstHp = RayHit(EyePos(), EyePos() + Facing() * 300, AllLiving(), player);
    // }

    if (DistanceBetween(EyePos(), firstHp) < 300)
        PlayEffect(All(), PlayEffect.GoodExplosion, MOD_COLORS[currentModIdx], firstHp, 0.3);

    CreateBeamEffect(All(), BeamType.BadBeam, gunPos, firstHp, MOD_COLORS[currentModIdx], EffectRev.None);
    modTrail = LastCreatedEntity();

    Wait(0.25);
    firstHp = null;
    DestroyEffect(modTrail);
}

rule: "[Main] :: Automatically Force Hero"
Event.OngoingPlayer
if (!HasSpawned())
{
    ForcePlayerHero(player, Hero.Illari);

    Wait(1);
    LoopIfConditionIsTrue();

    DisallowButton(player, Button.PrimaryFire);
}

rule: "[Main] :: End Game"
if (matchStarted)
if (MatchTime() <= 0)
{
    EnableCompletion();
}

playervar Boolean usingAbility;
playervar Number equippedAbility;
playervar Any abilityEffect;

enum Ability
{
    None = -1,
    Teleport = 0,
    Mimic = 1,
    Foresight = 2,
    Fade = 3,
    Stimpack = 4,
    Lock = 5
}

rule: "[Ability] :: Give Ult over time"
Event.OngoingPlayer
if (IsAlive())
if (UltimateChargePercent() != 100)
if (!usingAbility)
{
    // workshop doesnt like floats for some reason so this is set to 1 per 0.6 seconds for the desired 60 seconds to ult
    // SetUltimateCharge(player, UltimateChargePercent() + 1); 
    SetUltimateCharge(player, 100); 
    Wait(S_ABILITY_CHARGE_TIME);
    LoopIfConditionIsTrue();
}

rule: "[Ability] :: Remove Some Ult Charge on Death"
Event.OnDeath
if (!usingAbility)
{
    SetUltimateCharge(player, (UltimateChargePercent() * 0.8) - 10); // lose ult charge on death
}   

rule: "[Ability] :: Ult Button Override"
Event.OngoingPlayer
if (IsAlive())
if (UltimateChargePercent() == 100)
if (IsButtonHeld(player, Button.Ultimate))
if (equippedAbility != Ability.None)
{
    usingAbility = true;
    PlayEffect(player, PlayEffect.BaptisteBioticLauncherExplosionSound, Color.Team1, player, 50);
    SetUltimateCharge(player, 0);
}

rule: "[Ability] :: Ult Replacement"
Event.OngoingPlayer
if (usingAbility)
{
    switch (equippedAbility)
    {
        case Ability.Teleport: 
            break;
        case Ability.Mimic:
            break;
        case Ability.Foresight:
            break;
        case Ability.Fade:
            break;
        case Ability.Stimpack:
            CreateEffect(All(), Effect.WinstonPrimalRageEffect, Color.Team1, player, 1, EffectRev.VisibleToPositionRadiusAndColor);
            abilityEffect[0] = LastCreatedEntity();
            CreateEffect(All(), Effect.Soldier76SprintingEffect, Color.Team1, player, 1, EffectRev.VisibleToPositionRadiusAndColor);
            abilityEffect[1] = LastCreatedEntity();
            CreateEffect(player, Effect.WinstonTeslaCannonTargetSound, Color.Team1, player, 30, EffectRev.VisibleToPositionRadiusAndColor);
            abilityEffect[2] = LastCreatedEntity();

            if (!buffEnabled[4])
                delay *= 0.70;

            bhopSpeedRate = S_BHOP_SPEED_RATE * 1.30;
            bhopSpeedFloor *= 1.30;
            bhopSpeedPercent *= 1.30;
            bhopRewardFactor *= 1.30;
            dodgeForce *= 1.30;
            SetMoveSpeed(player, bhopSpeedPercent);
            break;
        case Ability.Lock:
            break;
    }

    WaitUntil(IsDead(), 8); // todo: make this a custom timer and its own rule so i can get rid of the 2 ugly switch cases
    DestroyEffect(abilityEffect);
    PlayEffect(player, PlayEffect.BaptisteBioticLauncherExplosionSound, Color.Team1, player, 50);
    usingAbility = false;

    switch (equippedAbility)
    {
        case Ability.Teleport: 
            break;
        case Ability.Mimic:
            break;
        case Ability.Foresight:
            break;
        case Ability.Fade:
            break;
        case Ability.Stimpack:
            if (!buffEnabled[4])
                delay /= 0.70;
            else 
                delay = 0.5;

            bhopSpeedRate = S_BHOP_SPEED_RATE / 1.30;
            bhopSpeedFloor /= 1.30;
            bhopSpeedPercent = Max(bhopSpeedPercent / 1.30, S_MOVE_SPEED);
            bhopRewardFactor /= 1.30;
            dodgeForce /= 1.30;

            SetMoveSpeed(player, bhopSpeedPercent);
            break;
        case Ability.Lock:
            break;
    }
}