import "main.del";

// will have weird alignment for aspect ratios other than 16:9
Vector FacingTextLocation(in Number X, in Number Y): 
Update(EyePosition(local) + 100 * 
          (X * WorldVectorOf(Right(), local, LocalVector.Rotation) + // X
          (Y // Y
          - 0.200) * DirectionFromAngles(HorizontalAngleFromDirection(Facing(local)), VerticalAngleFromDirection(Facing(local)) - 90) +
          3 * Facing(local)));

Number orangeThreshold: (20 - MIN_SPEED) / (27 - MIN_SPEED);
Number redThreshold: (22.5 - MIN_SPEED) / (27 - MIN_SPEED);
Number purpleThreshold: (27 - MIN_SPEED) / (27 - MIN_SPEED);
Number threshold: Max(0, Min(1, (HorizontalSpeedOf(local) - MIN_SPEED) / (27 - MIN_SPEED)));

Color speedColor: 
    CustomColor(
        // r
        threshold < orangeThreshold ? 255 : 
        threshold < redThreshold ? 255 : 
        Near(255 - ((threshold - redThreshold) / (purpleThreshold - redThreshold)) * 95),

        // g
        threshold < orangeThreshold ? Near(255 - (threshold / orangeThreshold) * 90) : 
        threshold < redThreshold ? Near(165 - ((threshold - orangeThreshold) / (redThreshold - orangeThreshold)) * 165) : 
        Near(((threshold - redThreshold) / (purpleThreshold - redThreshold)) * 80),

        // b
        threshold < orangeThreshold ? Near(255 - (threshold / orangeThreshold) * 255) : 
        threshold < redThreshold ? 0 : 
        Near(((threshold - redThreshold) / (purpleThreshold - redThreshold)) * 180),

        255);

Number flashStartTime: local.fuelFlashStartTime;
Number timeSinceFlash: Time() - flashStartTime;
Number flashDuration: 0.5;
Number fadeAmount: timeSinceFlash < flashDuration 
                        ? timeSinceFlash / flashDuration
                        : 1;
Color fuelGreenFlash: CustomColor(
    fadeAmount * 255,
    255,
    fadeAmount * 255,
    255);

rule: "[Main] :: General HUD Text"
{
    // left spacer 
    CreateHudText(All(), null, null, " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location.Left, 0.1);

    // time
    CreateHudText(All(), null, <"<0>:<1><2>", Floor(MatchTime() / 60 % 60), 
                                MatchTime() % 60 < 10 ? "0" : "", 
                                Floor(MatchTime() % 60)>,
    " \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location.Top, 0.1);

    // speedometer
    CreateHudText(local, null, <"<0>", HorizontalSpeedOf(local) + 0.001>,
    null, Location.Top, 0.2, Color.White, speedColor, Color.White, HudTextRev.VisibleToSortOrderStringAndColor);

    // if (S_JETPACK_ENABLED)
    {
        // jetpack fuel, not a hud text since i would have to adjust ammo text spacing which frequently changes in gameplay
        // this will not show correctly on 21:9 monitors
        CreateProgressBarInWorldText(IsAlive(local) ? local : null, local.fuel * 100, 
        null,
        FacingTextLocation(-2.6, -1.35), 
        0, Clipping.DoNotClip, 
        local.isFlying
            ? CustomColor(255, PingPong(1500, 255), PingPong(1500, 255), 255)
            : local.fuel >= 1
                ? fuelGreenFlash
                : Color.White,
        Color.White,
        ProgressBarWorldEvaluation.VisibleToPositionValuesAndColor);

        CreateInWorldText(IsAlive(local) ? local : null, "Fuel", FacingTextLocation(-2.97, -1.1), 0.75, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition, Color.White);

        CreateInWorldText(IsAlive(local) ? local : null, IconString(Icon.Fire), FacingTextLocation(-3.08, -1.13), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition, Color.White);
    }
}

Color CanPlayerPickupBuffColor(Number index): 
    local.playerHasBuff && 
        (local.currentBuffIn != Once(index) || local.infAmmo)
        ? Color.Gray : BUFF_COLORS[Once(index)];

rule: "[Main] :: Pickup HUD Text and Effects : Welcome to hell"
if (validMap)
if (S_ENABLE_BUFFS)
{
    for (Number i! = 0; i < BUFF_NAMES.Length; i++)
    {
        if (S_SPAWN_BUFF[i])
        {
            // ammo
            CreateHudText(
                VisibleTo:        local.buffEnabled[Once(i)] ? local : null,
                Header:           null,
                Subheader:        null,
                Text:             <"<0> <1> Ammo: <2>",
                                        BUFF_ICONS[Once(i)], 
                                        BUFF_NAMES[Once(i)], 
                                        !local.infAmmo ? 
                                            !local.showAmmoAsPercentage ? 
                                                Ceil(local.heldBuffAmmo[Once(i)]) 
                                            : <"<0>%", Ceil(Ceil(local.heldBuffAmmo[Once(i)]) / S_BUFF_AMMO[Once(i)] * 100)>
                                        : "âˆž">, 
                Location:         Location.Left, 
                SortOrder:        1, 
                TextColor:        BUFF_COLORS[Once(i)], 
                Reevaluation:     HudTextRev.VisibleToSortOrderStringAndColor);

            // complete orb effect
            CreateEffect(
                VisibleTo:        buffCooldown[Once(i)] == 0 ? All() : null, 
                Type:             Effect.BadAura, 
                Color:            CanPlayerPickupBuffColor(i), 
                Position:         buffPos[Once(i)], 
                Radius:           0.45, 
                Reevaluation:     EffectRev.VisibleToAndColor);

            // complete text
            CreateInWorldText(
                VisibleTo:        buffCooldown[Once(i)] == 0 ? All() : null, 
                Header:           " \n\n\n" + BUFF_ICONS[Once(i)], 
                Position:         buffPos[Once(i)] + Vector(0, 0.085, 0),
                Scale:            2.1, 
                Clipping:         Clipping.ClipAgainstSurfaces, 
                Reevaluation:     InworldTextRev.VisibleToAndPosition);

            // completed/in-progress good aura effect
            CreateEffect(
                VisibleTo:        All(), 
                Type:             Effect.GoodAura, 
                Color:            CanPlayerPickupBuffColor(i),
                Position:         buffPos[Once(i)], 
                // Radius:           buffPickupEffectSize[Once(i)] * 0.0045,
                Radius:           Min((((TotalTimeElapsed() - buffTimestamps[Once(i)]) / S_BUFF_CD[Once(i)]) * 100) * 0.0045, 0.45),
                Reevaluation:     EffectRev.VisibleToPositionRadiusAndColor);

            // completed/in-progress sparkle effect
            CreateEffect(
                VisibleTo:        All(), 
                Type:             Effect.Sparkles, 
                Color:            CanPlayerPickupBuffColor(i),
                Position:         buffPos[Once(i)], 
                // Radius:           buffPickupEffectSize[Once(i)] * 0.0045,
                Radius:           Min((((TotalTimeElapsed() - buffTimestamps[Once(i)]) / S_BUFF_CD[Once(i)]) * 100) * 0.0045, 0.45),
                Reevaluation:     EffectRev.VisibleToPositionRadiusAndColor);

            // in progress sphere effect
            CreateEffect(
                VisibleTo:        buffCooldown[Once(i)] != 0 ? All() : null, 
                Type:             Effect.Sphere, 
                Color:            CanPlayerPickupBuffColor(i), 
                Position:         buffPos[Once(i)], 
                // Radius:           buffPickupEffectSize[Once(i)] * 0.0045,
                Radius:           Min((((TotalTimeElapsed() - buffTimestamps[Once(i)]) / S_BUFF_CD[Once(i)]) * 100) * 0.0045, 0.45),
                Reevaluation:     EffectRev.VisibleToPositionRadiusAndColor);
    
            // in progress progress bar
            CreateProgressBarInWorldText(
                VisibleTo:        buffCooldown[Once(i)] != 0 ? All() : null, 
                Value:            buffPickupEffectSize[Once(i)], 
                Text:             null, 
                Position:         buffPos[Once(i)] + Vector(0, buffPickupEffectSize[Once(i)] * 0.0045, 0),
                Scale:            0, 
                Clipping:         Clipping.ClipAgainstSurfaces, 
                ProgressBarColor: BUFF_COLORS[Once(i)], 
                TextColor:        Color.White, 
                Reevaluation:     ProgressBarWorldEvaluation.VisibleToPositionValuesAndColor);
        }
    }

    // buckshot
    if (S_SPAWN_BUFF[Buff.Buckshot])
    {
        // alt fire
        CreateHudText(local.buffEnabled[Buff.Buckshot] ? local : null, null, 
        <"<0>: Charge shots", InputBindingString(Button.Reload)>, null,
        Location.Left, 1.1, SubheaderColor: BUFF_COLORS[Buff.Buckshot]);

        // charge
        CreateHudText(local.buffEnabled[Buff.Buckshot] ? local : null, null,  
        <" Charges: <0>", local.chargeStr>, null,
        Location.Left, 1.2, SubheaderColor: BUFF_COLORS[Buff.Buckshot]);
    }

    // prism
    if (S_SPAWN_BUFF[Buff.Prism])
    {
        // alt fire
        CreateHudText(local.buffEnabled[Buff.Prism] ? local : null, null,
        <"<0>: Alternate fire", InputBindingString(Button.Reload)>, null,
        Location.Left, 1.1, SubheaderColor: BUFF_COLORS[Buff.Prism]);
    }

    // electro
    if (S_SPAWN_BUFF[Buff.Electro])
    {
        // alt fire
        CreateHudText(local.buffEnabled[Buff.Electro] ? local : null, null, 
        <"<0>: Alternate fire", InputBindingString(Button.Reload)>, null,
        Location.Left, 1.1, SubheaderColor: BUFF_COLORS[Buff.Electro]);

        // armed
        CreateHudText(local.totalProjAirtime != 0 ? local : null, null,  
        AltFont(<"Detonation in: <0>", local.projHitSurface ? Max(S_ELECTRO_PROJ_DELAY - local.airtime, 0.001) : Max(FINAL_PROJ_DELAY - local.totalProjAirtime, 0.001)>), null,
        Location.Left, 1.2, SubheaderColor: local.projHitSurface || local.totalProjAirtime > 1 ? Color.Red : BUFF_COLORS[5], Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor);
    }

    // spark
    if (S_SPAWN_BUFF[Buff.Spark])
    {
        // alt fire
        CreateHudText(local.buffEnabled[Buff.Spark] ? local : null, null, 
        <"<0>: Alternate fire", InputBindingString(Button.Reload)>, null,
        Location.Left, 1.1, SubheaderColor: BUFF_COLORS[Buff.Spark]);
    }

    // volt
    if (S_SPAWN_BUFF[Buff.Volt])
    {
        // temperature
        CreateProgressBarHudText(local.buffEnabled[Buff.Volt] ? local : null, 
        local.voltTemp * 100, !local.overheated ? <"<0>%", Floor(Clamp(local.voltTemp * 100 + (local.voltTemp * (Time() + 1000)) % 8, 0, 99))> : "Overheat",
        Location.Left, 1.2, 
        CustomColor(
            Lerp(255, 255, local.voltTemp), // r
            Lerp(100, 0, local.voltTemp),  // g
            Lerp(0, 0, local.voltTemp),  // b
            255), 
        CustomColor(
            Lerp(255, 255, local.voltTemp), // r
            Lerp(100, 0, local.voltTemp),  // g
            Lerp(0, 0, local.voltTemp),  // b
            255), 
        ProgressBarHudEvaluation.VisibleToValuesAndColor);
    }

    // mutators
    if (S_ENABLE_MUTATORS)
    {
        // mutator info
        // CreateHudText(
        //     isMutatorInWorld || mutatorUser != null ? RemoveFromArray(All(), mutatorUser) : null, 
        //     mutatorIcon, 
        //     mutatorStr, 
        //     mutatorProgressBar != 100 && mutatorCooldown <= S_M_CREATION 
        //         ? <"<0>%", Floor(mutatorProgressBar)> 
        //         : !IsTrueForAny(All(), Curr().playerHasMutator) 
        //             ? IconString(Icon.Checkmark)
        //             : <"In-use by <0>", mutatorUser>,
        //     Location.Left, 
        //     24, 
        //     mutatorColors[0], 
        //     mutatorColors[0], 
        //     Reevaluation: HudTextRev.VisibleToSortOrderStringAndColor);

        // icon
        CreateInWorldText(local.playerHasMutator ? local : null, 
        mutatorIcon, 
        FacingTextLocation(-0.65, -1.028), 
        1.2, 
        Clipping.DoNotClip, InworldTextRev.VisibleToPositionStringAndColor, 
        mutatorColors[0]);

        // text
        CreateInWorldText(local.playerHasMutator ? local : null, 
        mutatorStr,
        FacingTextLocation(0, -0.93), 
        1.75, 
        Clipping.DoNotClip, InworldTextRev.VisibleToPositionStringAndColor, 
        mutatorColors[0]);

        // progress bar
        CreateProgressBarInWorldText(local.playerHasMutator ? local : null, local.mutatorNormalTimeLeft, 
        null,
        FacingTextLocation(0, -1.235), 
        0.65, Clipping.DoNotClip, 
        mutatorColors[1], 
        null,
        ProgressBarWorldEvaluation.VisibleToPositionValuesAndColor);

        // ability text
        CreateInWorldText(local.playerHasMutator ? local : null, 
        StringReplace(MUTATOR_DESCRIPTIONS[chosenMutator], "*", InputBindingString(local.abilityButton)),
        FacingTextLocation(0, -1.125), 
        1, 
        Clipping.DoNotClip, InworldTextRev.VisibleToPositionStringAndColor, 
        mutatorColors[0]);

        // mutator spawning
        CreateProgressBarInWorldText(isMutatorInWorld && mutatorProgressBar != 100 ? All() : null, mutatorProgressBar, null, mutatorPos + Vector(0, mutatorProgressBar * 0.0045, 0), 0, Clipping.DoNotClip, mutatorColors[0], null, ProgressBarWorldEvaluation.VisibleToPositionValuesAndColor);
        CreateIcon(isMutatorInWorld && !IsInViewAngle(local, mutatorPos, 52) ? local : null, mutatorPos - Vector(0, 1.5, 0), Icon.ExclamationMark, IconRev.VisibleToPositionAndColor, mutatorColors[0], true);
        CreateEffect(isMutatorInWorld ? All() : null, Effect.BadAura, mutatorColors[1], mutatorPos, mutatorProgressBar * 0.0045, EffectRev.VisibleToPositionRadiusAndColor);
        CreateEffect(isMutatorInWorld ? All() : null, Effect.GoodAura, mutatorColors[0], mutatorPos, mutatorProgressBar * 0.0045, EffectRev.VisibleToPositionRadiusAndColor);
        CreateEffect(isMutatorInWorld ? All() : null, Effect.Sparkles, mutatorColors[0], mutatorPos, mutatorProgressBar * 0.0045, EffectRev.VisibleToPositionRadiusAndColor);

        // mutator spawned
        CreateInWorldText(isMutatorInWorld && mutatorProgressBar == 100 ? All() : null, " \n\n\n" + mutatorIcon, mutatorPos + Vector(0, 0.085, 0), 2.1, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString);
    }
}